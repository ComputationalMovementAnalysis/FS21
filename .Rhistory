solutions %>%
dplyr::filter(!decrypted_exists  | decrypted_age > encrypted_age) %>%
dplyr::select(encrypted, decrypted)
solutions %>%
dplyr::filter(!decrypted_exists  | decrypted_age > encrypted_age) %>%
dplyr::select(encrypted, decrypted) %>%
pmap(function(encrypted, decrypted){
myencrypt(decrypted,".passphrase")
})
mydecrypt("14_Week4/solutions/task_2.R")
mydecrypt("14_Week4/solutions/task_2.R",".passphrase")
lfi <- rast("00_Rawdata/vegetationshoehe_LFI.tif")
library(terra)
lfi <- rast("00_Rawdata/vegetationshoehe_LFI.tif")
lfi
tm_shape(lfi) + tm_raster()
library(tmap)
lfi
tm_shape(lfi) + tm_raster()
tm_shape(lfi) + tm_raster(palette = "viridis")
tm_shape(lfi) + tm_raster(palette = "viridis",style = "cont")
wildschwein_BE
# Chunk 1
source('01_R_Files/helperfunctions.R')
# Chunk 2
library(readr)
library(sf)
library(terra)
library(dplyr)
library(lubridate)
library(ggplot2)
wildschwein_BE <- read_delim("00_Rawdata/wildschwein_BE_2056.csv",",") %>%
st_as_sf(coords = c("E", "N"), crs = 2056, remove = FALSE)
# Chunk 3
# Chunk 4
# Chunk 5
crop_fanel <- read_sf("00_Rawdata/Feldaufnahmen_Fanel.gpkg")
head(crop_fanel)
summary(crop_fanel)
unique(crop_fanel$Frucht)
st_crs(crop_fanel)
ggplot(crop_fanel) +
geom_sf(aes(fill = Frucht))
wildschwein_summer <- wildschwein_BE %>%
filter(month(DatetimeUTC) %in% 5:6)
wildschwein_summer <-  st_join(wildschwein_summer, crop_fanel)
wildschwein_summer
ggplot(crop_fanel) +
geom_sf(aes(fill = Frucht)) +
geom_sf(data = wildschwein_summer)
wildschwein_smry <- wildschwein_summer %>%
st_set_geometry(NULL) %>%
mutate(
hour = hour(round_date(DatetimeUTC,"hour")),
Frucht = ifelse(is.na(Frucht),"other",Frucht),
Frucht = fct_lump(Frucht, 5,other_level = "other"),
) %>%
group_by(TierName ,hour,Frucht) %>%
count() %>%
ungroup() %>%
group_by(TierName , hour) %>%
mutate(perc = n / sum(n)) %>%
ungroup() %>%
mutate(
Frucht = fct_reorder(Frucht, n,sum, desc = TRUE)
)
p1 <- ggplot(wildschwein_smry, aes(hour,perc, fill = Frucht)) +
geom_col(width = 1) +
scale_y_continuous(name = "Percentage", labels = scales::percent_format()) +
scale_x_continuous(name = "Time (rounded to the nearest hour)") +
facet_wrap(~TierName ) +
theme_light() +
labs(title = "Percentages of samples in a given crop per hour",subtitle = "Only showing the most common categories")
p1
p1 +
coord_polar()  +
labs(caption = "Same visualization as above, displayed in a polar plot")
veg_height <- rast("00_Rawdata/vegetationshoehe_LFI.tif")
tm_shape(veg_height) +
tm_raster(palette = "viridis",style = "cont")
wildschwein_BE$veg_height <- terra::extract(veg_height,st_coordinates(wildschwein_BE))
wildschwein_BE
wildschwein_BE
wildschwein_BE$veg_height
veg_height_df <- terra::extract(veg_height,st_coordinates(wildschwein_BE))
class(veg_height_df)
cbind(wildschwein_BE,veg_height_df)
wildschwein_BE <- cbind(wildschwein_BE,veg_height_df)
tm_shape(veg_height) +
tm_raster(palette = "viridis",style = "cont") +
tm_layout(legend.outside = TRUE)
?tm_layout
tm_shape(veg_height) +
tm_raster(palette = "viridis",style = "cont") +
tm_layout(legend.outside = TRUE,legend.position = c("center","bottom"))
tm_shape(veg_height) +
tm_raster(palette = "viridis",style = "cont") +
tm_layout(legend.outside = TRUE,legend.position = c("center","BOTTOM"))
tm_shape(veg_height) +
tm_raster(palette = "viridis",style = "cont") +
tm_layout(legend.outside = TRUE,legend.position = c("CENTER","BOTTOM"))
tm_shape(veg_height) +
tm_raster(palette = "viridis",style = "cont") +
tm_layout(legend.outside = TRUE,legend.outside.position = "bottom")
tm_shape(veg_height) +
tm_raster(palette = "viridis",style = "cont") +
tm_layout(legend.outside = TRUE,legend.outside.position = "bottom", frame = FALSE)
tm_shape(veg_height) +
tm_raster(palette = "viridis",style = "cont", legend.is.portrait = FALSE) +
tm_layout(legend.outside = TRUE,legend.outside.position = "bottom", frame = FALSE)
tm_shape(veg_height) +
tm_raster(palette = "viridis",style = "cont", legend.is.portrait = FALSE) +
tm_layout(legend.outside = TRUE,legend.outside.position = "bottom", frame = FALSE,legend.width = 1)
tm_shape(veg_height) +
tm_raster(palette = "viridis",style = "cont", legend.is.portrait = FALSE) +
tm_layout(legend.outside = TRUE,legend.outside.position = "bottom", frame = FALSE,legend.width = 0.9)
tm_shape(veg_height) +
tm_raster(palette = "viridis",style = "cont", legend.is.portrait = FALSE) +
tm_layout(legend.outside = TRUE,legend.outside.position = "bottom", frame = FALSE,legend.width = 0.9, legend.text.size = 25)
tm_shape(veg_height) +
tm_raster(palette = "viridis",style = "cont", legend.is.portrait = FALSE) +
tm_layout(legend.outside = TRUE,legend.outside.position = "bottom", frame = FALSE,legend.width = 10)
tm_shape(veg_height) +
tm_raster(palette = "viridis",style = "cont", legend.is.portrait = FALSE, legend.hist = TRUE) +
tm_layout(legend.outside = TRUE,legend.outside.position = "bottom", frame = FALSE,legend.width = 10)
tm_shape(veg_height) +
tm_raster(palette = "viridis",style = "cont", legend.is.portrait = FALSE, legend.hist = TRUE)
tm_shape(veg_height) +
tm_raster(palette = "viridis",style = "cont", legend.is.portrait = FALSE) +
tm_layout(legend.outside = TRUE,legend.outside.position = "bottom", frame = FALSE,legend.width = 10)
inlineComments:::inlinecomment()
inlineComments:::inlinecomment()
?usethis::use_github_pages()
usethis::use_github_pages(path = "/docs")
usethis::use_github_pages(path = "docs/")
usethis::use_github_pages()
?gh_process_response
??gh_process_response
library(tidyr)
library(SimilarityMeasures)  # for the similarity measure functions
# all functions compare two trajectories (traj1 and traj2). Each trajectory
# must be an numeric matrix of n dimensions. Since our dataset is spatiotemporal
# we need to turn our Datetime column from POSIXct to integer:
pedestrians <- pedestrians %>%
mutate(Datetime_int = as.integer(DatetimeUTC))
# Next, we make an object for each trajectory only containing the
# coordinates in the three-dimensional space and turn it into a matrix
traj1 <- pedestrians %>%
filter(TrajID == 1) %>%
dplyr::select(E, N, Datetime_int) %>%
as.matrix()
# But instead of repeating these lines 6 times, we turn them into a function.
# (this is still more repetition than necessary, use the purr::map if you know
# how!)
df_to_traj <- function(df, traj){
df %>%
filter(TrajID == traj) %>%
dplyr::select(E, N, Datetime_int) %>%
as.matrix()
}
traj2 <- df_to_traj(pedestrians, 2)
traj3 <- df_to_traj(pedestrians, 3)
traj4 <- df_to_traj(pedestrians, 4)
traj5 <- df_to_traj(pedestrians, 5)
traj6 <- df_to_traj(pedestrians, 6)
# Then we can start comparing trajectories with each other
DTW(traj1, traj2)
DTW(traj1, traj3)
# ... and so on. Since this also leads to much code repetition, we will
# demostrate a diffferent approach:
# Instead of creating 6 objects, we can also create a single list containing 6
# elements by using "split" and "purrr::map"
library(purrr)
pedestrians_list <- map_dfr(2:6, function(x){
df_to_traj(pedestrians,x)
})
comparison_df <- map_dfr(1:5, function(x){
tibble(
trajID = x,
DTW = DTW(traj1, pedestrians_list[[x]]),
EditDist = EditDist(pedestrians_list[[1]], pedestrians_list[[x]]),
Frechet = Frechet(pedestrians_list[[1]], pedestrians_list[[x]]),
LCSS = LCSS(pedestrians_list[[1]], pedestrians_list[[x]],5,4,4)
)
})
library(tidyr)
comparison_df %>%
pivot_longer(-trajID) %>%
ggplot(aes(trajID,value, fill = as.factor(trajID)))+
geom_bar(stat = "identity") +
facet_wrap(~name,scales = "free") +
theme(legend.position = "none") +
labs(x = "Comparison trajectory", y = "Value", title = "Computed similarities using different measures \nbetween trajectory 1 to all other trajectories ")
library(tidyverse)
library(SimilarityMeasures)  # for the similarity measure functions
# all functions compare two trajectories (traj1 and traj2). Each trajectory
# must be an numeric matrix of n dimensions. Since our dataset is spatiotemporal
# we need to turn our Datetime column from POSIXct to integer:
pedestrians <- pedestrians %>%
mutate(Datetime_int = as.integer(DatetimeUTC))
# Next, we make an object for each trajectory only containing the
# coordinates in the three-dimensional space and turn it into a matrix
traj1 <- pedestrians %>%
filter(TrajID == 1) %>%
dplyr::select(E, N, Datetime_int) %>%
as.matrix()
# But instead of repeating these lines 6 times, we turn them into a function.
# (this is still more repetition than necessary, use the purr::map if you know
# how!)
df_to_traj <- function(df, traj){
df %>%
filter(TrajID == traj) %>%
dplyr::select(E, N, Datetime_int) %>%
as.matrix()
}
traj2 <- df_to_traj(pedestrians, 2)
traj3 <- df_to_traj(pedestrians, 3)
traj4 <- df_to_traj(pedestrians, 4)
traj5 <- df_to_traj(pedestrians, 5)
traj6 <- df_to_traj(pedestrians, 6)
# Then we can start comparing trajectories with each other
DTW(traj1, traj2)
DTW(traj1, traj3)
# ... and so on. Since this also leads to much code repetition, we will
# demostrate a diffferent approach:
# Instead of creating 6 objects, we can also create a single list containing 6
# elements by using "split" and "purrr::map"
library(purrr)
pedestrians_list <- map_dfr(2:6, function(x){
df_to_traj(pedestrians,x)
})
comparison_df <- map_dfr(1:5, function(x){
tibble(
trajID = x,
DTW = DTW(traj1, pedestrians_list[[x]]),
EditDist = EditDist(pedestrians_list[[1]], pedestrians_list[[x]]),
Frechet = Frechet(pedestrians_list[[1]], pedestrians_list[[x]]),
LCSS = LCSS(pedestrians_list[[1]], pedestrians_list[[x]],5,4,4)
)
})
library(tidyr)
comparison_df %>%
pivot_longer(-trajID) %>%
ggplot(aes(trajID,value, fill = as.factor(trajID)))+
geom_bar(stat = "identity") +
facet_wrap(~name,scales = "free") +
theme(legend.position = "none") +
labs(x = "Comparison trajectory", y = "Value", title = "Computed similarities using different measures \nbetween trajectory 1 to all other trajectories ")
library(SimilarityMeasures)  # for the similarity measure functions
pedestrians <- pedestrians %>%
mutate(Datetime_int = as.integer(DatetimeUTC))
traj1 <- pedestrians %>%
filter(TrajID == 1) %>%
dplyr::select(E, N, Datetime_int) %>%
as.matrix()
pedestrians <- read_delim("00_Rawdata/pedestrian.csv",",")
ggplot(pedestrians, aes(E,N)) +
geom_point(data = dplyr::select(pedestrians, -TrajID),alpha = 0.1) +
geom_point(aes(color = as.factor(TrajID)), size = 2) +
geom_path(aes(color = as.factor(TrajID))) +
facet_wrap(~TrajID,labeller = label_both) +
coord_equal() +
theme_minimal() +
labs(title = "Visual comparison of the 6 trajectories", subtitle = "Each subplot highlights a trajectory") +
theme(legend.position = "none")
library(SimilarityMeasures)  # for the similarity measure functions
pedestrians <- pedestrians %>%
mutate(Datetime_int = as.integer(DatetimeUTC))
traj1 <- pedestrians %>%
filter(TrajID == 1) %>%
dplyr::select(E, N, Datetime_int) %>%
as.matrix()
df_to_traj <- function(df, traj){
df %>%
filter(TrajID == traj) %>%
dplyr::select(E, N, Datetime_int) %>%
as.matrix()
}
traj2 <- df_to_traj(pedestrians, 2)
traj3 <- df_to_traj(pedestrians, 3)
traj4 <- df_to_traj(pedestrians, 4)
traj5 <- df_to_traj(pedestrians, 5)
traj6 <- df_to_traj(pedestrians, 6)
DTW(traj1, traj2)
DTW(traj1, traj3)
library(purrr)
pedestrians_list <- map_dfr(2:6, function(x){
df_to_traj(pedestrians,x)
})
comparison_df <- map_dfr(1:6, function(x){
tibble(
trajID = x,
DTW = DTW(traj1, pedestrians_list[[x]]),
EditDist = EditDist(pedestrians_list[[1]], pedestrians_list[[x]]),
Frechet = Frechet(pedestrians_list[[1]], pedestrians_list[[x]]),
LCSS = LCSS(pedestrians_list[[1]], pedestrians_list[[x]],5,4,4)
)
})
pedestrians_list <- map_dfr(2:6, function(x){
df_to_traj(pedestrians,x)
})
pedestrians_list <- map(1:6, function(x){
df_to_traj(pedestrians,x)
})
comparison_df <- map_dfr(2:6, function(x){
tibble(
trajID = x,
DTW = DTW(pedestrians_list[[1]], pedestrians_list[[x]]),
EditDist = EditDist(pedestrians_list[[1]], pedestrians_list[[x]]),
Frechet = Frechet(pedestrians_list[[1]], pedestrians_list[[x]]),
LCSS = LCSS(pedestrians_list[[1]], pedestrians_list[[x]],5,4,4)
)
})
comparison_df %>%
pivot_longer(-trajID) %>%
ggplot(aes(trajID,value, fill = as.factor(trajID)))+
geom_bar(stat = "identity") +
facet_wrap(~name,scales = "free") +
theme(legend.position = "none") +
labs(x = "Comparison trajectory", y = "Value", title = "Computed similarities using different measures \nbetween trajectory 1 to all other trajectories ")
url_med <- "https://rodlzdf-a.akamaihd.net/de/tivi/20/01/200123_kalle_blomquist_lebt_gefaehrlich_asl/8/200123_kalle_blomquist_lebt_gefaehrlich_asl_2328k_p35v14.mp4"
url_general <- "https://rodlzdf-a.akamaihd.net/de/tivi/20/01/200123_kalle_blomquist_lebt_gefaehrlich_asl/8/200123_kalle_blomquist_lebt_gefaehrlich_asl_2328k_p35v14.mp4"
shiny::runApp(system.file("examples/03-knitr", package="shinyAce"))
inlineComments:::inlinecomment()
xaringanExtra::embed_xaringan("https://computationalmovementanalysis.github.io/Inputs_Nils/going_further_with_git.html")
xaringanExtra::embed_xaringan("https://computationalmovementanalysis.github.io/Inputs_Nils/going_further_with_git.html",max_width = "800")
xaringanExtra::embed_xaringan("https://computationalmovementanalysis.github.io/Inputs_Nils/going_further_with_git.html",style = "width: 800px")
xaringanExtra::embed_xaringan("https://computationalmovementanalysis.github.io/Inputs_Nils/going_further_with_git.html",style = "width: 800px")
xaringanExtra::embed_xaringan("https://computationalmovementanalysis.github.io/Inputs_Nils/going_further_with_git.html",style = c("width: 800px"))
xaringanExtra::embed_xaringan("https://computationalmovementanalysis.github.io/Inputs_Nils/going_further_with_git.html",max_width = "800px")
xaringanExtra::embed_xaringan("https://computationalmovementanalysis.github.io/Inputs_Nils/going_further_with_git.html",max_width = "800px")
xaringanExtra::embed_xaringan("https://computationalmovementanalysis.github.io/Inputs_Nils/going_further_with_git.html",max_width = "800px")
source('01_R_Files/helperfunctions.R')
solutions_print("11_Week1/solutions/",".passphrase")
readLines("W01_05_tasks_and_inputs.Rmd")
knitr::purl("W01_05_tasks_and_inputs.Rmd")
knitr::purl("W01_05_tasks_and_inputs.Rmd",documentation = 0)
?purl
readLines("W01_05_tasks_and_inputs.Rmd")
rmd_file <- "W01_05_tasks_and_inputs.Rmd"
line <- readLines(rmd_file)
chunkborder <- str_starts(line, "```")
chunkborder <- str_starts(line, "```{r")
chunkborder <- str_starts(line, "```\\{r")
chunkborder
chunkborder <- str_starts(line, "```")
cumsums <- cumsum(chunkborder)
cumsums
inchunk <- cumsums %% 2 == 1 | chunkborder
lines2
lines2 <- line[!inchunk]
lines2
lines2 <- line[inchunk]
lines2
lines2 <- line[!inchunk]
lines2
lines2 <- line[inchunk]
lines2
pedestrians <- read_delim("00_Rawdata/pedestrian.csv",",")
ggplot(pedestrians, aes(E,N)) +
geom_point(data = dplyr::select(pedestrians, -TrajID),alpha = 0.1) +
geom_point(aes(color = as.factor(TrajID)), size = 2) +
geom_path(aes(color = as.factor(TrajID))) +
facet_wrap(~TrajID,labeller = label_both) +
coord_equal() +
theme_minimal() +
labs(title = "Visual comparison of the 6 trajectories", subtitle = "Each subplot highlights a trajectory") +
theme(legend.position = "none")
library(tidyverse)
pedestrians <- read_delim("00_Rawdata/pedestrian.csv",",")
ggplot(pedestrians, aes(E,N)) +
geom_point(data = dplyr::select(pedestrians, -TrajID),alpha = 0.1) +
geom_point(aes(color = as.factor(TrajID)), size = 2) +
geom_path(aes(color = as.factor(TrajID))) +
facet_wrap(~TrajID,labeller = label_both) +
coord_equal() +
theme_minimal() +
labs(title = "Visual comparison of the 6 trajectories", subtitle = "Each subplot highlights a trajectory") +
theme(legend.position = "none")
library(SimilarityMeasures)  # for the similarity measure functions
# all functions compare two trajectories (traj1 and traj2). Each trajectory
# must be an numeric matrix of n dimensions. Since our dataset is spatiotemporal
# we need to turn our Datetime column from POSIXct to integer:
pedestrians <- pedestrians %>%
mutate(Datetime_int = as.integer(DatetimeUTC))
# Next, we make an object for each trajectory only containing the
# coordinates in the three-dimensional space and turn it into a matrix
traj1 <- pedestrians %>%
filter(TrajID == 1) %>%
dplyr::select(E, N, Datetime_int) %>%
as.matrix()
# But instead of repeating these lines 6 times, we turn them into a function.
# (this is still more repetition than necessary, use the purr::map if you know
# how!)
df_to_traj <- function(df, traj){
df %>%
filter(TrajID == traj) %>%
dplyr::select(E, N, Datetime_int) %>%
as.matrix()
}
traj2 <- df_to_traj(pedestrians, 2)
traj3 <- df_to_traj(pedestrians, 3)
traj4 <- df_to_traj(pedestrians, 4)
traj5 <- df_to_traj(pedestrians, 5)
traj6 <- df_to_traj(pedestrians, 6)
# Then we can start comparing trajectories with each other
dtw_1_2 <- DTW(traj1, traj2)
dtw_1_3 <- DTW(traj1, traj3)
# ... and so on. Since this also leads to much code repetition, we will
# demostrate a diffferent approach:
# Instead of creating 6 objects, we can also create a single list containing 6
# elements by using "split" and "purrr::map"
library(purrr)
pedestrians_list <- map(1:6, function(x){
df_to_traj(pedestrians,x)
})
comparison_df <- map_dfr(2:6, function(x){
tibble(
trajID = x,
DTW = DTW(pedestrians_list[[1]], pedestrians_list[[x]]),
EditDist = EditDist(pedestrians_list[[1]], pedestrians_list[[x]]),
Frechet = Frechet(pedestrians_list[[1]], pedestrians_list[[x]]),
LCSS = LCSS(pedestrians_list[[1]], pedestrians_list[[x]],5,4,4)
)
})
library(tidyr) # for pivot_longer
comparison_df %>%
pivot_longer(-trajID) %>%
ggplot(aes(trajID,value, fill = as.factor(trajID)))+
geom_bar(stat = "identity") +
facet_wrap(~name,scales = "free") +
theme(legend.position = "none") +
labs(x = "Comparison trajectory", y = "Value", title = "Computed similarities using different measures \nbetween trajectory 1 to all other trajectories ")
Frechet(pedestrians_list[[1]], pedestrians_list[[3]])
pedestrians_list
pedestrians_list[[1]]
pedestrians_list[[1]]
map_dfr(c(1,3), ~pedestrians_list[[.x]])
map_dfr(c(1,3), ~as_tibblepedestrians_list[[.x]])
map_dfr(c(1,3), ~as_tibble(pedestrians_list[[.x]]))
map_dfr(c(1,3), ~as_tibble(pedestrians_list[[.x]])) %>% ggplot(aes(E,N))
map_dfr(c(1,3), ~as_tibble(pedestrians_list[[.x]])) %>% ggplot(aes(E,N)) + geom_point()
git add sdf
file.create("docs/.gitignore")
writeLines("*","docs/.gitignore")
writeLines("*","docs/.gitignore")
file.create("docs/.gitignore")
writeLines("*","docs/.gitignore")
?file.edit()
file.remove("docs/.gitignore")
file.remove("docs/.gitignore")
if(file.exists("docs/.gitignore")){file.remove("docs/.gitignore")}
if(file.exists("docs/.gitignore")){file.remove("docs/.gitignore")}
print("hell")
print(12)
System("git --version")
system("git --version")
list.files("docs",recursive = TRUE)
list.files("docs",recursive = TRUE)
git2r::status()
git2r::status()
system("git ls-files --others --exclude-standard")
untracked <- system("git ls-files --others --exclude-standard",intern = TRUE)
untracked
grepl("$docs/",untracked)
grepl("^docs/",untracked)
untracked[grepl("^docs/",untracked)]
untracked_docs <- untracked[grepl("^docs/",untracked)]
list.files("docs",recursive = TRUE)
untracked_docs
untracked_docs
untracked_docs %>%
map(~system(glue::glue("git update-index --assume-unchanged {.x}")))
purrr::map(untracked_docs, ~system(glue::glue("git update-index --assume-unchanged {.x}")))
purrr::map(untracked_docs, ~print(glue::glue("git update-index --assume-unchanged {.x}")))
untracked
list.files("docs")
file.path("docs",list.files("docs"))
file.path("docs",list.files("docs"))
purrr::map(file.path("docs",list.files("docs"))[1], ~print(glue::glue("git update-index --assume-unchanged {.x}")))
library(dpyrl)
library(dplyr)
file.path
list.files("docs") %>%
file.path("docs",.)
list.files("docs",recursive = TRUE,include.dirs = FALSE) %>%
file.path("docs",.)
list.files("docs",recursive = TRUE,include.dirs = FALSE) %>%
file.path("docs",.) %>%
purrr::map(~print(glue::glue("git update-index --assume-unchanged {.x}")))
list.files("docs",recursive = TRUE,include.dirs = FALSE) %>%
file.path("docs",.) %>%
purrr::map(~print(glue::glue("git update-index --assume-unchanged {.x}"))) %>%
invisible()
list.files("docs",recursive = TRUE,include.dirs = FALSE) %>%
file.path("docs",.) %>%
purrr::map(~system(glue::glue("git update-index --assume-unchanged {.x}"))) %>%
invisible()
library(ggplot)
library(ggplot2)
?coord_polar()
untracked <- system("git ls-files --others --exclude-standard",intern = TRUE)
untracked
untracked_docs <- untracked[grepl("^docs/",untracked)]
purrr::map(untracked_docs, ~print(glue::glue("git update-index --assume-unchanged {.x}")))
untracked_docs
untracked <- system("git ls-files --others --exclude-standard",intern = TRUE)
untracked
list.files("docs",recursive = TRUE,include.dirs = FALSE) %>%
file.path("docs",.) %>%
purrr::map(~system(glue::glue("git update-index --no-assume-unchanged {.x}"))) %>%
invisible()
