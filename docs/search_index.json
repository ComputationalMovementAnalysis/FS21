[["index.html", "Computational Movement Analysis: Patterns and Trends in Environmental Data Master ENR, Spring Semester 2021 Welcome to the course! License", " Computational Movement Analysis: Patterns and Trends in Environmental Data Master ENR, Spring Semester 2021 Patrick Laube, Nils Ratnaweera, Nikolaos Bakogiannis 27 April, 2021 Welcome to the course! For the practical part of the course, building-up skills for analyzing movement data in the software environment R, youll be using data from the ZHAW project Prävention von Wildschweinschäden in der Landwirtschaft. The project investigates the spatiotemporal movement patterns of wild boar (Sus scrofa) in agricultural landscapes. We will study the trajectories of these wild boar, practicing the most basic analysis tasks of Computational Movement Analysis (CMA). This video gives a nice introduction into the project License These R Exercises are created by Patrick Laube, Nils Ratnaweera and Nikolaos Bakogiannis for the Course *Computational Movement Analysis\" and are licensed under Creative Commons Attribution 4.0 International License. This work is licensed under a Creative Commons Attribution 4.0 International License. "],["W01_01_exercise.html", "Exercise 1", " Exercise 1 This exercise covers the necessary steps for getting ready in R and some basic concepts for setting up a well-structured R project. The lesson introduces how additional packages that provide useful functions for data science are made available and how spatial data is handled. The exercise concludes with the creation of your first map featuring movement data. "],["W01_02_outcomes.html", "Learning outcomes", " Learning outcomes You learn how to structure an R project. You can read movement data from a .csv-file into a data.frame You can convert spatial point data from a data.frame to a spatial object sf You can perform basic spatial operations on spatial objects in R You can produce simple maps of your spatial data using ggplot2 You can produce simple maps of your spatial data using tmap "],["W01_03_prerequesites.html", "Prerequisites", " Prerequisites Readings Skills from R for Data Science (Wickham and Grolemund 2017): RS1.1 Preface (16p, ix-xxiv) RS1.2 Chap2 Workflow basics (3p, 37-39) RS1.3 Chap4 Workflow scripts (3p, 77-79) RS1.4 Chap6 workflow projects (6p, 111-116) RS1.5 Chap8 Data Import with readr (21p) RS1.6 Chap13 Date and Times with lubridate (18p, 237-256) "],["W01_04_preperations.html", "Preperation", " Preperation Much of this chapter was taken from Bryan and Heister (2021). If you want to dive deeper into using Git, we highly recommend this book. For an even deeper dive into Git, read Chacon and Straub (2014). Both books are available free and open source on happygitwithr.com and git-scm.com/book, respectively. Check you version of R Check your Version of R by opening RStudio and typing the following command into the console. R.version.string ## [1] &quot;R version 4.0.3 (2020-10-10)&quot; This returns the version number of your R installation, whereas the first digit (4) indicates the number of the major release, the second digit (0) indicates the minor release and the last digit (3) refers to the patch release. As a general rule of thumb, you will want to update R if you dont have the current major version or are lagging two (or more) versions behind the current minor release In the time of writing (April, 2021), the current R Version is 4.0.5 (released on 2021-03-31 07:05:15, see cran.r-project.org). Your installation should therefore not be older than 4.0.0. If it is, make sure that you have updated R until next week (doing it now will probably take too long). Check these instructions on how to update R Check your version of RStudio RStudio is the Graphical User Interface (GUI) we use in our course to interact with R. RStudio should not be too old either and we recommend updating if you dont have the latest version: check if this is the case by clicking on help &gt; check for updates. If you need to update RStudio, dont update now but have a newer version of RStudio installed before next week. Install the necessary packages If you havent already, install the packages tidyverse, sf and terra(using install.packages()). install.packages(&quot;tidyverse&quot;) install.packages(&quot;sf&quot;) install.packages(&quot;terra&quot;) Install Git Next, install Git. If you are not sure whether you already have Git installed or not, you can verify this by typing git --version in the terminal[^terminal]. If this command returns a version number you have Git installed already and might only need to update it. If this command returns git: command not found (or something similar), you will need to install Git first. Windows: We recommend installing Git for Windows, also known as msysgit or Git Bash. When asked about Adjusting your PATH environment, select Git from the command line and also from 3rd-party software RStudio prefers Git to be installed in C:/Program Files/Git, we recommend following this convention Otherwise, we believe it is good to accept the defaults macOS: We recommend you install the Xcode command line tools (not all of Xcode), which includes Git Go to the shell and enter xcode-select --install to install developer command line tools Linux: On Ubuntu or Debian Linux: sudo apt-get install git On Fedora or RedHat Linux: sudo yum install git Configure RStudio Now we will set some RStudio Global options. But first, close all instances of RStudio and restart it (!!!). Then go to Tools &gt; Global options. R General Deactivate the option Restore .RData into workspace at startup Set Save workspace to .RData on exit to Never Git / SVN Activate the option Enable version control interface for RStudio projects If the Field Git executable: shows (Not Found), browse to your git installation (previous step). This path should look something like this: Windows: C:/Program Files/Git/bin/git.exe (not C:/Program Files/Git/cmd/git.exe or git-bash.exe) Linux / macOS: /usr/bin/git Terminal Set option New terminals open with to Git Bash Click on Ok to apply the change and close the options menu. Introduce yourself to Git Now it is time to introduce yourself to git. For this, we need to use the shell terminal, which is why we are going to spend a few word on the shell first. The shell is a program on your computer whose job is to run other programs. It looks very much like the R-console (in the bottom left of RStudio) that you are already know: You have a place to input text which is transferred to (and interpreted by) the computer when you press enter. RStudio has a shell terminal right next to the R-console (tab Terminal). Every Windows comes with two different shell installations: Command prompt and PowerShell. After installing Git we now have a third option, Git Bash. The shell terminal in RStudio uses Command prompt per default, in [the last step][#configure-rstudio] we just switched the shell to Git Bash. Now use the terminal in RStudio to introduce yourself: git config --global user.name &quot;Maria Nusslinger&quot; git config --global user.email &quot;nussmar@email.com&quot; Of course, replace the name and address with your credentials. Use the email address that you will use to create your Github account (which we will do next week). Prepare the folder structure for this course By this point, you probably have created a folder for this course somewhere on your computer. In our example, we assume this folder is located here: C:/Users/yourname/semester2/Modul_CMA (mentally replace this with your actual path). Before we dive into the exercises, take a minute to think about how you are going to structure your files in this folder. This course will take place over 7 weeks, and in each week you will receive or produce various files. We recommend creating a separate folder for each week, and one folder for the semester project, like so: Course Folder (C:\\\\Users\\\\yourname\\\\semester2\\\\Modul_CMA) ¦--week1 ¦--week2 ¦--week3 ¦--week4 ¦--week5 ¦--week6 ¦--week7 °--semester_project For the R-exercises that take place in weeks 1 to 5, we recommend that you create a new RStudio Project each week in subdirectory of the appropriate week. For example, this week your folder structure could look like this: Folder Week 1 (C:\\\\Users\\\\yourname\\\\semester2\\\\Modul_CMA\\\\week1) ¦--slides.pdf ¦--my_notes.docx ¦--seminar_screenshot.jpg °--week1-rexercise ¦--week1-rexercise.Rproj ¦--wildschwein_BE.csv °--my_solution.Rmd Note: the RStudio Project is located in a subfolder of C:/Users/yourname/semester2/Modul_CMA/week1 and named week1-rexercise. week1-rexercise is the projects directory name and the project name we realize that that the week number is redundant, there is a reason1 for this this means each week is a fresh start (which has pros and cons) Create an RStudio project for the first week Create a new RStudio Project (File &gt; New Project &gt; New Directory &gt; New Project). Click on Browse and switch to your equivalent of the folder C:/Users/yourname/semester2/Modul_CMA/week1 (the project we are about to initiate will be be created in a subdirectory of this folder). Click on open to confirm the selection In the field Directory name, type week1-rexercise. This will be the name of your RStudio project and its parent directory. Check the option Create a git repository Click on Create Project You are all set! You can start working on the tasks of exercise 1. You will see the project names of all your RStudio Projects listed in RStudio. Having the week number in the project name keeps you from getting confused on which project you are working on. "],["W01_05_tasks_and_inputs.html", "Tasks and inputs", " Tasks and inputs Before starting with the task: make sure you have read and followed the instructions in section Preperation In RStudio, open the RStudio Project you created for this week if you havent done so already. You can see that you are in an RStudio Project if the projects name is visible next to the little RStudio logo in the top right corner of RStudio (otherwise it will read Project: (None)). Download the wildboar movement data here: wildschwein_BE.csv (right click Save target as..) Once you have set everything up, commit your file to your git repo in the following manner: Save your (R/RMarkdown) file Switch to the Git-Tab in the pane in the top right corner Click commit to open the commit-Window Click in the checkbox next to the file(s) you want to commit Add a commit message to explain what you are committing (e.g. initial commit) Click on commit to commit your changes Task 1: Import data Create a new R- (or RMarkdown) file and begin by loading the following packages: library(readr) # to import tabular data (e.g. csv) library(dplyr) # to manipulate (tabular) data library(ggplot2) # to visualize data Move the file wildschwein_BE.csv into your project directory and import it into r as a data.frame. Assign correct column types as necessary and make sure the time zone is set correctly for the date/time column. Note: We recommend using the readr package to import your data (they all begin with read_*, note the underscore). These functions are less error prone than the base R functions (read.*, note the period). Specifically for the wild boar data, we recommend read_delim(). For everyone working on the RStudio Server: You will first need to upload this data to the server using the upload-button in the Files tab. Commit your changes as described in the beginning. Write a meaningful commit message (e.g. completed task 1). Task 2: Explore Data We will use a range of different visualization tools (i.e. R-packages) in this course. Several packages techniques have emerged in recent years, each with their specific strengths and weaknesses. While base::plot()is quick and simple, it not very scalable with growing complexity. ggplot2 offers solutions for most use cases and has an elegant, consistent syntax that is easy to get accustomed to. We will get to know other techniques later in the course. Get an overview of your data by creating a first map-like plot of your data producing a simple scatter plot with ggplot2. Setting up a ggplot with our data is done using the command ggplot(wildschwein_BE, aes(Long, Lat, colour = TierID)). Creating a map is done via the basic scatter plot command geom_point(). Assigning every individual its own colour is done using the ggplot argument colour =. Save your code in the appropriate section. Figure 1: Your plot should look something like this. Commit your changes as described in the beginning. Have a look at your commit history by clicking on History in the Git-Pane. Input: Handling spatial data Until now, weve stored our location data within data frames as Lat/Long columns. This works well for many tasks, but sometimes we need special spatial classes to handle our trajectories. We will get to know such cases in our next tasks, but first we need to convert our data.frame into a spatial object. We will largely rely on sfwhen working with vector data in R. In order to transform our data.frame into an sf object, we need to use the function st_as_sf() while specifying the columns storing the coordinates and the coordinate reference system. (At this point, we assume you know what a Coordinate Reference Systems is. Check out this link if this is not the case.) library(sf) wildschwein_BE_sf &lt;- st_as_sf(wildschwein_BE, coords = c(&quot;Long&quot;, &quot;Lat&quot;), crs = 4326) Notice how st_as_sf takes the EPSG code for the crs = argument. You can find a lot of useful information on Coordinate Reference Systems (including EPSG Codes, etc.) under epsg.io. Lets compare our original data.frame with this new sf object: wildschwein_BE ## # A tibble: 51,246 x 6 ## TierID TierName CollarID DatetimeUTC Lat Long ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dttm&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 002A Sabi 12275 2014-08-22 21:00:12 47.0 7.05 ## 2 002A Sabi 12275 2014-08-22 21:15:16 47.0 7.05 ## 3 002A Sabi 12275 2014-08-22 21:30:43 47.0 7.05 ## 4 002A Sabi 12275 2014-08-22 21:46:07 47.0 7.05 ## 5 002A Sabi 12275 2014-08-22 22:00:22 47.0 7.05 ## 6 002A Sabi 12275 2014-08-22 22:15:10 47.0 7.05 ## 7 002A Sabi 12275 2014-08-22 22:30:13 47.0 7.05 ## 8 002A Sabi 12275 2014-08-22 22:45:11 47.0 7.05 ## 9 002A Sabi 12275 2014-08-22 23:00:27 47.0 7.05 ## 10 002A Sabi 12275 2014-08-22 23:15:41 47.0 7.05 ## # ... with 51,236 more rows wildschwein_BE_sf ## Simple feature collection with 51246 features and 4 fields ## geometry type: POINT ## dimension: XY ## bbox: xmin: 7.019889 ymin: 46.97125 xmax: 7.112075 ymax: 47.01882 ## geographic CRS: WGS 84 ## # A tibble: 51,246 x 5 ## TierID TierName CollarID DatetimeUTC geometry ## * &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dttm&gt; &lt;POINT [°]&gt; ## 1 002A Sabi 12275 2014-08-22 21:00:12 (7.049618 46.99317) ## 2 002A Sabi 12275 2014-08-22 21:15:16 (7.049509 46.99416) ## 3 002A Sabi 12275 2014-08-22 21:30:43 (7.049406 46.99383) ## 4 002A Sabi 12275 2014-08-22 21:46:07 (7.049217 46.99375) ## 5 002A Sabi 12275 2014-08-22 22:00:22 (7.049359 46.99375) ## 6 002A Sabi 12275 2014-08-22 22:15:10 (7.049363 46.99382) ## 7 002A Sabi 12275 2014-08-22 22:30:13 (7.049326 46.99387) ## 8 002A Sabi 12275 2014-08-22 22:45:11 (7.049237 46.99395) ## 9 002A Sabi 12275 2014-08-22 23:00:27 (7.048383 46.99481) ## 10 002A Sabi 12275 2014-08-22 23:15:41 (7.049396 46.99373) ## # ... with 51,236 more rows As you can see, st_as_sf() has added some metadata to our dataframe (geometry type, dimension, bbox, epsg and proj4string) and replaced the columns Lat and Long with a column named geometry. Other than that, the new sf object is very similar to our original dataframe. In fact, sf objects are essentially dataframes, as you can verify with the function is.data.frame(): is.data.frame(wildschwein_BE_sf) ## [1] TRUE All operations we know from handling data.frames can be used on the sf object. Try some out! # subset rows wildschwein_BE_sf[1:10,] wildschwein_BE_sf[wildschwein_BE_sf$TierName == &quot;Sabi&quot;,] # subset colums wildschwein_BE_sf[,2:3] Instead of keeping the same data twice (once as a data.frame, and once as an sf object), we will overwrite the data.frame and continue working with the sf object from now on. This saves some memory space in R and avoids confusion. wildschwein_BE &lt;- st_as_sf(wildschwein_BE, coords = c(&quot;Long&quot;, &quot;Lat&quot;), crs = 4326) rm(wildschwein_BE_sf) # we can remove this sf object, since it just eats up our memory Task 3: Project data from WGS84 So what can we do with our new sf object that we couldnt before? One example is projecting the WGS84 (Lat/Long) coordinates into the new Swiss CRS CH1903+ LV952. Do this by using the function st_transform. By the way, do you notice a pattern here? The package sf names most functions for spatial operations with the prefix st_*, just as in PostGIS. Heres the resulting sf object from the operation: wildschwein_BE ## Simple feature collection with 51246 features and 4 fields ## geometry type: POINT ## dimension: XY ## bbox: xmin: 2568153 ymin: 1202306 xmax: 2575154 ymax: 1207609 ## projected CRS: CH1903+ / LV95 ## # A tibble: 51,246 x 5 ## TierID TierName CollarID DatetimeUTC geometry ## * &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dttm&gt; &lt;POINT [m]&gt; ## 1 002A Sabi 12275 2014-08-22 21:00:12 (2570409 1204752) ## 2 002A Sabi 12275 2014-08-22 21:15:16 (2570402 1204863) ## 3 002A Sabi 12275 2014-08-22 21:30:43 (2570394 1204826) ## 4 002A Sabi 12275 2014-08-22 21:46:07 (2570379 1204817) ## 5 002A Sabi 12275 2014-08-22 22:00:22 (2570390 1204818) ## 6 002A Sabi 12275 2014-08-22 22:15:10 (2570390 1204825) ## 7 002A Sabi 12275 2014-08-22 22:30:13 (2570387 1204831) ## 8 002A Sabi 12275 2014-08-22 22:45:11 (2570381 1204840) ## 9 002A Sabi 12275 2014-08-22 23:00:27 (2570316 1204935) ## 10 002A Sabi 12275 2014-08-22 23:15:41 (2570393 1204815) ## # ... with 51,236 more rows Commit your changes as described in the beginning. Input: Calculate Convex Hull Transforming from one Coordinate Reference System to another was one operation where we needed an object with a spatial nature. In this way, we were able to use an off the shelf function to project the coordinates from one CRS to another. In our next example, we again rely on a spatial function: We want to calculate a convex hull per Wild boar. And guess what the function for calculating a convex hull is called in sf? If you guessed st_convex_hull(), you were right! By default st_convex_hull() calculates the convex hull per feature, i.e. per point in our dataset. This of course makes little sense. In order to calculate the convex hull per animal, we need to convert our point- to multipoint-features where each feature contains all positions of one animal. This is achieved in two steps: First: add a grouping variable to the sf object. Note the new grouping variable in the metadata of the sf object. Other than that, group_by has no effect on our sf object. wildschwein_BE_grouped &lt;- group_by(wildschwein_BE,TierID) wildschwein_BE_grouped ## Simple feature collection with 51246 features and 4 fields ## geometry type: POINT ## dimension: XY ## bbox: xmin: 2568153 ymin: 1202306 xmax: 2575154 ymax: 1207609 ## projected CRS: CH1903+ / LV95 ## # A tibble: 51,246 x 5 ## # Groups: TierID [3] ## TierID TierName CollarID DatetimeUTC geometry ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dttm&gt; &lt;POINT [m]&gt; ## 1 002A Sabi 12275 2014-08-22 21:00:12 (2570409 1204752) ## 2 002A Sabi 12275 2014-08-22 21:15:16 (2570402 1204863) ## 3 002A Sabi 12275 2014-08-22 21:30:43 (2570394 1204826) ## 4 002A Sabi 12275 2014-08-22 21:46:07 (2570379 1204817) ## 5 002A Sabi 12275 2014-08-22 22:00:22 (2570390 1204818) ## 6 002A Sabi 12275 2014-08-22 22:15:10 (2570390 1204825) ## 7 002A Sabi 12275 2014-08-22 22:30:13 (2570387 1204831) ## 8 002A Sabi 12275 2014-08-22 22:45:11 (2570381 1204840) ## 9 002A Sabi 12275 2014-08-22 23:00:27 (2570316 1204935) ## 10 002A Sabi 12275 2014-08-22 23:15:41 (2570393 1204815) ## # ... with 51,236 more rows Second: use summarise() to dissolve all points into a mulipoint object. wildschwein_BE_smry &lt;- summarise(wildschwein_BE_grouped) wildschwein_BE_smry ## Simple feature collection with 3 features and 1 field ## geometry type: MULTIPOINT ## dimension: XY ## bbox: xmin: 2568153 ymin: 1202306 xmax: 2575154 ymax: 1207609 ## projected CRS: CH1903+ / LV95 ## # A tibble: 3 x 2 ## TierID geometry ## &lt;chr&gt; &lt;MULTIPOINT [m]&gt; ## 1 002A ((2568903 1206200), (2568925 1206207), (2568980 1206197), (2569024 120~ ## 2 016A ((2569231 1205823), (2569245 1205925), (2569247 1206027), (2569251 120~ ## 3 018A ((2568153 1205611), (2568155 1205613), (2568161 1205624), (2568162 120~ Now we can run st_convex_hull on the new sf object. mcp &lt;- st_convex_hull(wildschwein_BE_smry) Task 4: Ploting spatial objects Using base plot to visualize sf objects is easy enough, just try the following code. plot(mcp) But since we use ggplot extensively, try and plot the object mcp with ggplot. Hint: Use the layer geom_sf() to add an sf object. Note: ggplot refuses to use our specified CRS, so we need to force this by specifying datum = in coord_sf(). Try it out. Commit your changes as described in the beginning. Have a look at your commit history by clicking on History in the Git-Pane. Input: Importing raster data In the next task, we would like to add a background map to our mcp object. Download the file here: pk100_BE.tif To import the file into R, we use the package terra with the function rast. library(terra) pk100_BE &lt;- terra::rast(&quot;00_Rawdata/pk100_BE.tif&quot;) pk100_BE ## class : SpatRaster ## dimensions : 1821, 2321, 3 (nrow, ncol, nlyr) ## resolution : 5, 5 (x, y) ## extent : 2567000, 2578605, 1199996, 1209101 (xmin, xmax, ymin, ymax) ## coord. ref. : +proj=somerc +lat_0=46.9524055555556 +lon_0=7.43958333333333 +k_0=1 +x_0=2600000 +y_0=1200000 +ellps=bessel +towgs84=674.374,15.056,405.346,0,0,0,0 +units=m +no_defs ## source : pk100_BE.tif ## names : pk1_1, pk1_2, pk1_3 ## min values : 0, 0, 0 ## max values : 255, 255, 255 pk100_BE_2056.tif is a three layered geotiff File. The above console output shows some metadata including the resolution, extent and the names of our layers (pk1_1, pk1_2etc). With the default plot method, each layer is displayed individually: plot(pk100_BE) With plotRGB all three layers are combined into a single image: plotRGB(pk100_BE) Task 5: Adding a background map There are multiple ways to add a background map in ggplot, many require additional packages. This is a good opportunity to get to know a completely different package for creating maps: tmap (thematic map). This package was developed with a syntax very similar to ggplot2, which makes it easy to learn. library(tmap) tm_shape(pk100_BE) + tm_rgb() As you can see, plotting layers in tmap is combined with the + sign, just as in ggplot2. In tmap however, each layer consists of two objects: a tm_shape() in which the data is called, and a tm_* object in which we define how the data is visualized (tm_rgb() states that it is plotted as an RGB Raster Layer). Add the object mcp to the plot in this manner. Read the vignette if you are having trouble. Commit your changes as described in the beginning. Task 6: Create an interactive map Rerun the tmap()... command from the previous task, but switch the plotting mode to view\" (tmap_mode(\"view\")) beforehand. Omit the raster layer (pk100_BE), you wont be needing it. Commit your changes as described in the beginning. Have a look at your commit history by clicking on History in the Git-Pane. As weve mentioned in the first Input, you can look up the EPSG codes under (epsg.io)[http://epsg.io]. For information specific to Switzerland, check the swisstopo website "],["W01_06_solutions.html", "Solutions", " Solutions Hover over the code chunk and copy the whole content by clicking on the clipboard icon on the top left. # task 1 ######################################################################## # Data import #### wildschwein_BE &lt;- read_delim(&quot;00_Rawdata/wildschwein_BE.csv&quot;,&quot;,&quot;) # Check Timezone attr(wildschwein_BE$DatetimeUTC,&quot;tzone&quot;) # or wildschwein_BE$DatetimeUTC[1] # task 2 ######################################################################## ggplot(wildschwein_BE, aes(Long,Lat, colour = TierID)) + geom_point() + coord_map() + theme(legend.position = &quot;none&quot;) # task 3 ######################################################################## wildschwein_BE &lt;- st_transform(wildschwein_BE, 2056) # task 4 ######################################################################## plot(mcp) ggplot(mcp,aes(fill = TierID)) + geom_sf(alpha = 0.4) ggplot(mcp,aes(fill = TierID)) + geom_sf(alpha = 0.4) + coord_sf(datum = 2056) # task 5 ######################################################################## library(tmap) tm_shape(pk100_BE) + tm_rgb() tm_shape(pk100_BE) + tm_rgb() + tm_shape(mcp) + tm_polygons(col = &quot;TierID&quot;,alpha = 0.4,border.col = &quot;red&quot;) + tm_legend(bg.color = &quot;white&quot;) # task 6 ######################################################################## tmap_mode(&quot;view&quot;) tm_shape(mcp) + tm_polygons(col = &quot;TierID&quot;,alpha = 0.4,border.col = &quot;red&quot;) + tm_legend(bg.color = &quot;white&quot;) "],["W02_01_exercise.html", "Exercise 2", " Exercise 2 "],["W02_01_learning_outcomes.html", "Learning Outcomes", " Learning Outcomes You understand the dplyr functions mutate, summarise and group_by and can apply them to sf objects You can derive movement parameters (timelag, steplength, speed) from trajectory data. You can re-sample your trajectory data for cross-scale movement analysis. "],["W02_02_prerequisites.html", "Prerequisites", " Prerequisites Readings Skills from R for Data Science (Wickham and Grolemund 2017): RS2.1 Chap3 Data Transformation with dplyr (31p, 43-76) RS2.2 Chap10 Relational data with dplyr (21p, 171-193) RS2.3 Chap14 Pipes with magrittr (6p, 261-268) Readings Theory R2.1 Laube and Purves (2011): How fast is a cow? cross - scale analysis of movement data. "],["W02_04_demo_tidyverse.html", "Demo Tidyverse", " Demo Tidyverse Depending on your knowledge of R, getting an overview of the data we imported last week might have been quite a challenge. Surprisingly enough, importing, cleaning and exploring your data can be the most challenging, time consuming part of a project. RStudio and the tidyverse offer many helpful tools to make this part easier (and more fun). You have read chapters on dplyr and magrittr as a preparation for this exercise. Before we start with the exercise however, this demo illustrates a simple approach offered by tidyverse which is applicable to sf-objects. Assume we want to calculate the timelag between subsequent positions. To achieve this we can use the function difftime() combined with lead() from dplyr. Lets look at these functions one by one. difftime difftime takes two POSIXct values. now &lt;- Sys.time() later &lt;- now + 10000 time_difference &lt;- difftime(later,now) time_difference ## Time difference of 2.777778 hours You can also specify the unit of the output. time_difference &lt;- difftime(later,now,units = &quot;mins&quot;) time_difference ## Time difference of 166.6667 mins difftime returns an object of the Class difftime. However in our case, numeric values would be more handy than the Class difftime. So well wrap the command in as.numeric(): str(time_difference) ## &#39;difftime&#39; num 166.666666666667 ## - attr(*, &quot;units&quot;)= chr &quot;mins&quot; time_difference &lt;- as.numeric(difftime(later,now,units = &quot;mins&quot;)) str(time_difference) ## num 167 lead() / lag() lead() and lag() return a vector of the same length as the input, just offset by a specific number of values (default is 1). Consider the following sequence: numbers &lt;- 1:10 numbers ## [1] 1 2 3 4 5 6 7 8 9 10 We can now run lead() and lag() on this sequence to illustrate the output. n = specifies the offset, default = specifies the default value used to fill the emerging empty spaces of the vector. library(dplyr) lead(numbers) ## [1] 2 3 4 5 6 7 8 9 10 NA lead(numbers,n = 2) ## [1] 3 4 5 6 7 8 9 10 NA NA lag(numbers) ## [1] NA 1 2 3 4 5 6 7 8 9 lag(numbers,n = 5) ## [1] NA NA NA NA NA 1 2 3 4 5 lag(numbers,n = 5, default = 0) ## [1] 0 0 0 0 0 1 2 3 4 5 This helps us performing operations on subsequent values in a vector (or rows in a table). You can think of this a little bit like a moving temporal window that moves along the trajectory, or down the rows of a table respectively. lead(numbers)-numbers ## [1] 1 1 1 1 1 1 1 1 1 NA mutate() Using the above functions (difftime() and lead()), we can calculate the time lag, that is, the time difference between subsequent positions: library(readr) library(sf) wildschwein_BE &lt;- read_delim(&quot;00_Rawdata/wildschwein_BE.csv&quot;,&quot;,&quot;) wildschwein_BE &lt;- st_as_sf(wildschwein_BE, coords = c(&quot;Long&quot;, &quot;Lat&quot;), crs = 4326) wildschwein_BE$timelag &lt;- as.numeric(difftime(lead(wildschwein_BE$DatetimeUTC), wildschwein_BE$DatetimeUTC, units = &quot;secs&quot;)) We mention wildschwein_BE three times in this function, which is complicated. Instead, we can use mutate() to simplify the syntax: wildschwein_BE &lt;- mutate(wildschwein_BE,timelag = as.numeric(difftime(lead(DatetimeUTC), DatetimeUTC, units = &quot;secs&quot;))) group_by() Now lets have a look at the vector created before: summary(wildschwein_BE$timelag) ## Min. 1st Qu. Median Mean 3rd Qu. Max. NA&#39;s ## -22648470 896 903 571 916 60367 1 These values dont make much sense: some are negative (which should not be the case) and some are very high (which would indicate large data gaps and should not be the case either). The reason for this result is that we did not consider that timelag should just be calculated between subsequent rows of the same individual. We can implement this by using group_by() (just as if calculating the convex hull last week). wildschwein_BE &lt;- group_by(wildschwein_BE,TierID) After adding this grouping variable, calculating the timelag automatically accounts for the individual trajectories. wildschwein_BE &lt;- mutate(wildschwein_BE,timelag = as.numeric(difftime(lead(DatetimeUTC), DatetimeUTC, units = &quot;secs&quot;))) summary(wildschwein_BE$timelag) ## Min. 1st Qu. Median Mean 3rd Qu. Max. NA&#39;s ## 12 896 903 1408 916 60367 3 summarise() summary() returned the metrics over all individuals. If we want to summarise our data and get metrics per animal, we can use the dplyr function summarise(). In contrast to mutate(), which just adds a new column to the dataset, summarise() collapses the data to one row per individual (specified by group_by). summarise(wildschwein_BE, mean = mean(timelag, na.rm = T)) The above operation works fine on normal data.frames, but since wildschwein_BE is also an sf object, summarise actually merges all the points to a multipoint geometry, which takes a long time to calculate. In order to prevent this, we can set the objects geometry to NULL, which removes the spatial attribute. summarise(st_set_geometry(wildschwein_BE,NULL), mean_timelag = mean(timelag, na.rm = T)) ## # A tibble: 3 x 2 ## TierID mean_timelag ## * &lt;chr&gt; &lt;dbl&gt; ## 1 002A 1286. ## 2 016A 1412. ## 3 018A 1599. Piping The code above may be a bit hard to read, since it has so many nested functions which need to be read from the inside out. In order to make code readable in a more human-friendly way, we can use the piping command %&gt;% from magrittr, which is included in dplyr and the tidyverse. The above code then looks like this: wildschwein_BE %&gt;% # Take wildschwein_BE... st_set_geometry(NULL) %&gt;% # ...remove the geometry column... group_by(TierID) %&gt;% # ...group it by TierID summarise( # Summarise the data... mean_timelag = mean(timelag,na.rm = T) # ...by calculating the mean timelag ) ## # A tibble: 3 x 2 ## TierID mean_timelag ## * &lt;chr&gt; &lt;dbl&gt; ## 1 002A 1286. ## 2 016A 1412. ## 3 018A 1599. Bring it all together Here is the same approach with a different, smaller dataset: pigs = data.frame( TierID=c(8001,8003,8004,8005,8800,8820,3000,3001,3002,3003,8330,7222), sex=c(&quot;M&quot;,&quot;M&quot;,&quot;M&quot;,&quot;F&quot;,&quot;M&quot;,&quot;M&quot;,&quot;F&quot;,&quot;F&quot;,&quot;M&quot;,&quot;F&quot;,&quot;M&quot;,&quot;F&quot;), age=c(&quot;A&quot;,&quot;A&quot;,&quot;J&quot;,&quot;A&quot;,&quot;J&quot;,&quot;J&quot;,&quot;J&quot;,&quot;A&quot;,&quot;J&quot;,&quot;J&quot;,&quot;A&quot;,&quot;A&quot;), weight=c(50.755,43.409,12.000,16.787,20.987,25.765,22.0122,21.343,12.532,54.32,11.027,88.08) ) pigs ## TierID sex age weight ## 1 8001 M A 50.7550 ## 2 8003 M A 43.4090 ## 3 8004 M J 12.0000 ## 4 8005 F A 16.7870 ## 5 8800 M J 20.9870 ## 6 8820 M J 25.7650 ## 7 3000 F J 22.0122 ## 8 3001 F A 21.3430 ## 9 3002 M J 12.5320 ## 10 3003 F J 54.3200 ## 11 8330 M A 11.0270 ## 12 7222 F A 88.0800 pigs %&gt;% summarise( mean_weight = mean(weight) ) ## mean_weight ## 1 31.58477 pigs %&gt;% group_by(sex) %&gt;% summarise( mean_weight = mean(weight) ) ## # A tibble: 2 x 2 ## sex mean_weight ## * &lt;chr&gt; &lt;dbl&gt; ## 1 F 40.5 ## 2 M 25.2 pigs %&gt;% group_by(sex,age) %&gt;% summarise( mean_weight = mean(weight) ) ## # A tibble: 4 x 3 ## # Groups: sex [2] ## sex age mean_weight ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 F A 42.1 ## 2 F J 38.2 ## 3 M A 35.1 ## 4 M J 17.8 "],["W02_04b_demo_tidyverse_code.html", "Demo Tidyverse (R-Code)", " Demo Tidyverse (R-Code) Hover over the code chunk and copy the whole content by clicking on the clipboard icon on the top left. now &lt;- Sys.time() later &lt;- now + 10000 time_difference &lt;- difftime(later,now) time_difference time_difference &lt;- difftime(later,now,units = &quot;mins&quot;) time_difference str(time_difference) time_difference &lt;- as.numeric(difftime(later,now,units = &quot;mins&quot;)) str(time_difference) numbers &lt;- 1:10 numbers library(dplyr) lead(numbers) lead(numbers,n = 2) lag(numbers) lag(numbers,n = 5) lag(numbers,n = 5, default = 0) lead(numbers)-numbers library(readr) library(sf) wildschwein_BE &lt;- read_delim(&quot;00_Rawdata/wildschwein_BE.csv&quot;,&quot;,&quot;) wildschwein_BE &lt;- st_as_sf(wildschwein_BE, coords = c(&quot;Long&quot;, &quot;Lat&quot;), crs = 4326) wildschwein_BE$timelag &lt;- as.numeric(difftime(lead(wildschwein_BE$DatetimeUTC), wildschwein_BE$DatetimeUTC, units = &quot;secs&quot;)) wildschwein_BE &lt;- mutate(wildschwein_BE,timelag = as.numeric(difftime(lead(DatetimeUTC), DatetimeUTC, units = &quot;secs&quot;))) summary(wildschwein_BE$timelag) wildschwein_BE &lt;- group_by(wildschwein_BE,TierID) wildschwein_BE &lt;- mutate(wildschwein_BE,timelag = as.numeric(difftime(lead(DatetimeUTC), DatetimeUTC, units = &quot;secs&quot;))) summary(wildschwein_BE$timelag) summarise(wildschwein_BE, mean = mean(timelag, na.rm = T)) summarise(st_set_geometry(wildschwein_BE,NULL), mean_timelag = mean(timelag, na.rm = T)) wildschwein_BE %&gt;% # Take wildschwein_BE... st_set_geometry(NULL) %&gt;% # ...remove the geometry column... group_by(TierID) %&gt;% # ...group it by TierID summarise( # Summarise the data... mean_timelag = mean(timelag,na.rm = T) # ...by calculating the mean timelag ) pigs = data.frame( TierID=c(8001,8003,8004,8005,8800,8820,3000,3001,3002,3003,8330,7222), sex=c(&quot;M&quot;,&quot;M&quot;,&quot;M&quot;,&quot;F&quot;,&quot;M&quot;,&quot;M&quot;,&quot;F&quot;,&quot;F&quot;,&quot;M&quot;,&quot;F&quot;,&quot;M&quot;,&quot;F&quot;), age=c(&quot;A&quot;,&quot;A&quot;,&quot;J&quot;,&quot;A&quot;,&quot;J&quot;,&quot;J&quot;,&quot;J&quot;,&quot;A&quot;,&quot;J&quot;,&quot;J&quot;,&quot;A&quot;,&quot;A&quot;), weight=c(50.755,43.409,12.000,16.787,20.987,25.765,22.0122,21.343,12.532,54.32,11.027,88.08) ) pigs pigs %&gt;% summarise( mean_weight = mean(weight) ) pigs %&gt;% group_by(sex) %&gt;% summarise( mean_weight = mean(weight) ) pigs %&gt;% group_by(sex,age) %&gt;% summarise( mean_weight = mean(weight) ) "],["W02_03_preperation.html", "Preperation", " Preperation These preperations for week 2 build up on week 1. Make sure your software is up to date: R and RStudio: Last week, we showed you how to determine whether your R Version or your RStudio needs updating (see Exercise 1 / Preperation). If your versions are up to date: Great! If not, update these before todays session. Git: If you had issues last week installing or configuring Git to work with RStudio, make sure you debug these problems now. Consult the chapter on troubleshooting Bryan and Heister (2021). If this doesnt help, contact us. Step 1: Create a Github account Typically, you do this once (in a lifetime) Last week, you worked with git on your local machine, with no way of synchronising your changes with a cloud server. This week you will use Github to sync your changes. To do this, create a Github account on github.com (its free of course). Use the email address that you configured in git last week. If you are not sure which mail you used, type git config user.email in the shell terminal. You dont have to use the same user.name on Github as use configured in Git. When choosing a username on Github, consider the following advice: incorporating your actual name is nice, people like to know who they are dealing with choose a name that you are comfortable revealing it to a future boss shorter is better than longer make it timeless (e.g. dont incorporate your universitys name) Step 2: Authenticate Git to work with Github Typically, you do this once (per computer) If we want to push changes from our local repository to our Github cloud repository, Github must verify your credentials. Other software might just ask for your username and password, its a little different with Git. Basically there are two ways to connect with your remote repo (ssh and https), we will use https in this course. First, create a personal access token (PAT) on Github Login into github.com, click on your user profile (top right) and click on Settings Choose Personal access tokens &gt; Generate new token Add a descriptive note (e.g. https access from my personal laptop) Select scope repo Click on Generate token Copy your new personal access token (in the green box) You wont be able to see this token again If you loose it, you can simply create a new one If you want to store it, you neeed to treat this PAT like a password. Only store it in a secure place (like a password management app) and never publish this PAT publicly Then, store your PAT in you local Git In R, install the gitcreds package (install.packages(\"gitcreds\")) Load this library (library(gitcreds)) Call the function gitcreds_set() Respond to the prompt with your PAT from the last step Check that you have stored a credential with gitcreds_get() Step 3: Create a Github repo Typically, you do this once per project Now you can create a Repository on Github that you can afterwards connect to your RStudio project from this week (which you will create in the next step). To do this, go to github.com and click on the plus sign in the top right corner, then fill in the following information: Repository name: Give a meaningful name, e.g. cma-week2 Description: Give a meaningful description, e.g. Solving exercise 2 of the course \"Computational Movement Analysis Make the repo public, not private Check Add a README file Click on Create repository, then on the green button Code. Select HTTPS (it might already be selected) and then copy the URL by clicking on the clipboard symbol. The URL should look something list this https://github.com/YOUR-GITHUB-USERNAME/cma-week2.git. Report this URL back to us via Moodle (under L2 Data Issues &gt; R Exercises E2 &gt; Exercise 2 (Github URL)) Step 4: Create a new RStudio Project You will now create a new RStudio Project for week 2. Unlike last week, we will create the project in such a way that it is immediately connected to our Github repo. In RStudio, start a new project. Choose: File &gt; New Project &gt; Version Control &gt; Git. In the repository URL, paste the URL you copied in the last step Change Project directory name to week2-rexercise (if you are following the convention we proposed last week) Change the parent directory (Create project as a subdirectory of) to your equivalent of C:/Users/yourname/semester2/Modul_CMA/week2 Click on Create Project. You are now all set and can start with this weeks tasks! PS: You just created an RStudio Project which is automatically connected to Github. You can also connect existing local Git repositories (e.g. from week 1) to Github. Contact us if you are interested in learning this! "],["W02_05_tasks_and_inputs.html", "Tasks and Inputs", " Tasks and Inputs Open the RStudio Project you created for week 2 in the preparation Download the new wildboar movement data, and save it to your new projects directory wildschwein_BE_2056.csv (right click Save target as..) Now, commit your changes to your repo like we did last week (see below): Save your (R/RMarkdown) file Switch to the Git-Tab in the pane in the top right corner Click commit to open the commit-Window Click in the checkbox next to the file(s) you want to commit Add a commit message to explain what you are committing (e.g. initial commit) Click on commit to commit your changes Pushing our changes from our local repo the remote repo on Github Simply click the green button Push in the Git tab in RStudio. Have a look at your remote Repository on Github (https://github.com/YOUR-GITHUB-USERNAME/cma-week2). Do you see the new files there? Contact us if this does not work. Note: You do not need to push your changes to your remote repo after every commit. Its enough if you do this every few commits. Task 0: Import your data Create a new R- (or RMarkdown-) file and begin with the following lines of code (adjust the path to your csv file accordingly). Note: that this dataset is already converted to EPSG 2056 the coordinates are stored in the columns (E/N) setting remove = FALSE preserves the original (E/N) columns, which come in handy later on ## Load the necessary libraries ################################################ library(readr) # to import tabular data (e.g. csv) library(dplyr) # to manipulate (tabular) data library(ggplot2) # to visualize data library(sf) # to handle spatial vector data library(terra) # To handle raster data library(lubridate) # To handle dates and times ## Import the downloaded csv ################################################## wildschwein_BE &lt;- read_delim(&quot;00_Rawdata/wildschwein_BE_2056.csv&quot;,&quot;,&quot;) # adjust path wildschwein_BE &lt;- st_as_sf(wildschwein_BE, coords = c(&quot;E&quot;, &quot;N&quot;), crs = 2056, remove = FALSE) Task 1: Getting an overview Calculate the time difference between subsequent rows as described in the demo. You can calculate the time difference using the function difftime() in combination with lead(). the function difftime() has an option units. Set this to secs to get the time difference in seconds use as.integer() to turn the output returned by difftime() into an integer. store the output in a new column (e.g. timelag) Now inspect your data in more detail. Try to answer the following questions: How many individuals were tracked? For how long were the individual tracked? Are there gaps? Were all individuals tracked concurrently or sequentially? What is the temporal sampling interval between the locations? Here are some exemplary visualisation you could produce to answer these questions. Can you now answer the above questions? After completing the task, commit your changes to git using a good commit message (e.g. completed task 1). Task 2: Deriving movement parameters I: Speed In this task we will derive some additional movement parameters from our trajectories. So far our trajectories only consist of a list of time-stamped spatial locations. So lets calculate the animals steplength based on the Euclidean distance between two subsequent locations. You can calculate the Euclidean distance with the following formula: \\[\\text{distance} = \\sqrt{(\\text{E1} - \\text{E2})^{2}+(\\text{N1} - \\text{N2})^{2}}\\] E1, N1 refers to the current location E2, N2 refers to the subsequent location you can use lead(E,1) to address E2 store the output in a new column (e.g. steplength) Now calculate the animals speed between subsequent locations based on steplength and the timelag (from the last task). What speed unit do you get? After completing the task, commit your changes to git using a good commit message. Task 3: Cross-scale movement analysis Laube and Purves (2011) analyse animal movement across different scales (see below). In their paper, the authors suggest reducing the granularity of the data by subsetting the data to every nth element. We will do the same on a dataset that includes 200 locations of a single wild boar with a constant sampling interval of 60 seconds. Figure 2: Black points are used in calculation of movement parameters (e.g. speed) at a given termporal scale (Laube and Purves, 2011) Download this dataset here: caro60.csv (right click: save target as..). Import it just like you imported the other wild boar data and save it to a new variable named caro (note that the locations are stored in EPSG 2056). Now manually reduce the granularity of our sampling interval by selecting every 3rd, 6th and 9th position and save the output to caro_3, caro_6,caro_9 accordingly. Tip: There are many ways to go about this, we recommend using seq() where from = 1, to = the length of the dataset and by = n (i.e. 3, 6 or 9). This creates an integer vector that can either used in dplyr::slice() or in row subsetting (see slice() or ?\"[.data.frame\"). You should now have 4 datasets with different number of rows: nrow(caro) ## [1] 200 nrow(caro_3) ## [1] 67 nrow(caro_6) ## [1] 34 nrow(caro_9) ## [1] 23 Now calculate timelag, steplength and speed for these data sets, just as you did in the last task. To finish the task, compare the speeds visually in a line plot and also visualize the trajectories in a map (see examples below). Interpret the line plot, what do the different lines for the different temporal granularities tell you? After completing the task, commit your changes to git using a good commit message. ## # A tibble: 67 x 6 ## TierID TierName CollarID DatetimeUTC N E ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dttm&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 010C Caro 13973 2015-09-15 08:07:00 2570589. 1205095. ## 2 010C Caro 13973 2015-09-15 08:10:00 2570518. 1205115. ## 3 010C Caro 13973 2015-09-15 08:13:00 2570482. 1205124. ## 4 010C Caro 13973 2015-09-15 08:16:00 2570490. 1205100. ## 5 010C Caro 13973 2015-09-15 08:19:00 2570497. 1205092. ## 6 010C Caro 13973 2015-09-15 08:22:00 2570499. 1205091. ## 7 010C Caro 13973 2015-09-15 08:25:00 2570500. 1205087. ## 8 010C Caro 13973 2015-09-15 08:28:00 2570496. 1205094. ## 9 010C Caro 13973 2015-09-15 08:31:00 2570497. 1205091. ## 10 010C Caro 13973 2015-09-15 08:34:00 2570499. 1205091. ## # ... with 57 more rows Task 4: Deriving movement parameters II: Rolling window functions A different approach would be to smoothen the derived parameters using a moving window function. The zoo package offers a variate of moving window functions (roll_*). Install this package, load it into the session and use the function roll_mean() to smooth the calculated speed. Familiarise yourself with this function by working on some dummy data, for example: library(zoo) example &lt;- rnorm(10) rollmean(example,k = 3,fill = NA,align = &quot;left&quot;) ## [1] 0.93634335 0.31709038 0.02370048 0.67869801 0.73369105 0.50401344 ## [7] -0.56144365 -0.56902598 NA NA rollmean(example,k = 4,fill = NA,align = &quot;left&quot;) ## [1] 0.6775521 0.2045005 0.5848215 0.5255629 0.3446928 0.1459635 ## [7] -0.4102301 NA NA NA Now run rollmeanon the speed variable of the subset (caro). Visualize the output from your moving windows and compare different window sizes (k =). After completing the task, commit your changes to git using a good commit message. Additionally, push all your commits to your remote repository on Github by clicking the green upwards pointing arrow in the Git pane in RStudio. "],["W03_01_exercise.html", "Exercise 3", " Exercise 3 "],["W03_01_learning_outcomes.html", "Learning Outcomes", " Learning Outcomes You are able to segment a trajectory, e.g. using the approach proposed in Laube and Purves (2011) You are able to compute the similarity between given trajectories using the package SimilarityMeasures. You acquire further useful data processing skills. "],["W03_02_prerequisites.html", "Prerequisites", " Prerequisites Readings Skills from R for Data Science (Wickham and Grolemund 2017): RS3.1 Chap1 Data visualization with ggplot2 (31, 3-35) RS3.2 Chap5 Exploratory Data Analysis (28p, 81.109) Readings Theory: Alan Both (2018) A Comparative Analysis of Trajectory Similarity Measures: Recommendations for Selection and Use, excerpt from an unpublished manuscript, confidential. "],["W03_03_preperation.html", "Preperation", " Preperation Install the following libraries: ## Preperation ################################################################# install.packages(&quot;SimilarityMeasures&quot;) # The following packages are for optional tasks: install.packages(&quot;plotly&quot;) # You don&#39;t really need the following packages, # we just use them in our figures install.packages(&quot;ggrepel&quot;) Open your R Project from last week. Either run your own script from last week or the following lines to transform the data into the form we need for todays exercise. library(tidyverse) library(sf) # Import as dataframe wildschwein_BE &lt;- read_delim(&quot;00_Rawdata/wildschwein_BE.csv&quot;,&quot;,&quot;) # Convert to sf-object wildschwein_BE &lt;- st_as_sf(wildschwein_BE, coords = c(&quot;Long&quot;, &quot;Lat&quot;), crs = 4326,remove = FALSE) # transform to CH1903 LV95 wildschwein_BE &lt;- st_transform(wildschwein_BE, 2056) # Add geometry as E/N integer Columns wildschwein_BE &lt;- st_coordinates(wildschwein_BE) %&gt;% cbind(wildschwein_BE,.) %&gt;% rename(E = X) %&gt;% rename(N = Y) # Compute timelag, steplength and speed wildschwein_BE &lt;- wildschwein_BE %&gt;% group_by(TierID) %&gt;% mutate( timelag = as.numeric(difftime(lead(DatetimeUTC),DatetimeUTC,units = &quot;secs&quot;)), steplength = sqrt((E-lead(E))^2+(N-lead(N))^2), speed = steplength/timelag ) "],["W03_04_tasks_and_inputs.html", "Tasks and Inputs", " Tasks and Inputs Input: Segmentation as in Laube and Purves (2011) Youve read Laube and Purves (2011) about segmenting trajectories. In the paper, the authors define static fixes as those whose average Euclidean distance to other fixes inside a temporal window v is less than some threshold d, as illustrated in the following figure: The above image from Laube and Purves (2011) visualizes the following steps: Temporal representation of constant sample interval with associated temporal window v for three exemplary points; Measurement of average distance in temporal window v to sample points in spatial representation; Removal of all points where average distance is less than a given threshold, i.e. removal of static points; and Removal of subtrajectories with less than a threshold temporal length. We will implement this method on the following dummy data. Once youve grasped the idea on this simple data, you will implement it for the wild boar data in task 1. Note: I use tibble() instead of data.frame(). The two functions are very similar, this is just a matter of preference. set.seed(10) n = 20 df &lt;- tibble(X = cumsum(rnorm(n)), Y = cumsum(rnorm(n))) ggplot(df, aes(X,Y)) + geom_path() + geom_point() + coord_equal() Segmenting The first step is calculating the distances to temporally close samples within the temporal window v. Take the following sample data, assuming the sampling interval is 5 minutes. If we take a temporal window of 20 minutes, that would mean including 5 fixes. We need to calculate the following Euclidean distances (pos representing single location): pos[n-2] to pos[n] pos[n-1] to pos[n] pos[n] to pos[n+1] pos[n] to pos[n+2] Just like last week, we use the formular for calculating the Euclidean distance in in combination with lead() and lag(). For example, to create the necessary offset of n-2, we use lag(x, 2). For each offset, we create one individual column. df &lt;- df %&gt;% mutate( nMinus2 = sqrt((lag(X,2)-X)^2+(lag(Y,2)-Y)^2), # distance to pos -10 minutes nMinus1 = sqrt((lag(X,1)-X)^2+(lag(Y,1)-Y)^2), # distance to pos - 5 minutes nPlus1 = sqrt((X-lead(X,1))^2+(Y-lead(Y,1))^2), # distance to pos + 5 mintues nPlus2 = sqrt((X-lead(X,2))^2+(Y-lead(Y,2))^2) # distance to pos +10 minutes ) Now we want to calculate the mean distance of nMinus2, nMinus1, nPlus1, nPlus2 for each row. The below function calculates the overall mean of all columns, which is not what we want. df %&gt;% mutate( stepMean = mean(c(nMinus2, nMinus1,nPlus1,nPlus2), na.rm = T) ) ## # A tibble: 20 x 7 ## X Y nMinus2 nMinus1 nPlus1 nPlus2 stepMean ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.0187 -0.596 NA NA 2.19 3.26 1.72 ## 2 -0.166 -2.78 NA 2.19 1.53 3.42 1.72 ## 3 -1.54 -3.46 3.26 1.53 2.20 3.40 1.72 ## 4 -2.14 -5.58 3.42 2.20 1.30 1.78 1.72 ## 5 -1.84 -6.84 3.40 1.30 0.540 1.34 1.72 ## 6 -1.45 -7.21 1.78 0.540 1.39 2.21 1.72 ## 7 -2.66 -7.90 1.34 1.39 0.945 2.22 1.72 ## 8 -3.02 -8.77 2.21 0.945 1.63 1.92 1.72 ## 9 -4.65 -8.88 2.22 1.63 0.361 2.27 1.72 ## 10 -4.91 -9.13 1.92 0.361 2.16 2.68 1.72 ## 11 -3.80 -11.0 2.27 2.16 0.760 1.03 1.72 ## 12 -3.05 -11.1 2.68 0.760 0.997 1.38 1.72 ## 13 -3.29 -10.1 1.03 0.997 1.00 2.10 1.72 ## 14 -2.30 -9.91 1.38 1.00 1.57 2.94 1.72 ## 15 -1.56 -11.3 2.10 1.57 1.44 1.38 1.72 ## 16 -1.47 -12.7 2.94 1.44 1.02 1.81 1.72 ## 17 -2.42 -12.4 1.38 1.02 1.77 2.21 1.72 ## 18 -2.62 -14.1 1.81 1.77 0.981 1.71 1.72 ## 19 -1.69 -14.4 2.21 0.981 0.811 NA 1.72 ## 20 -1.21 -15.1 1.71 0.811 NA NA 1.72 Since we want the mean value per Row, we have to explicitly specify this before mutate() with the function rowwise(). Note the new grouping variable &lt;by row&gt; when printing the dataframe to the console. df &lt;- df %&gt;% rowwise() %&gt;% mutate( stepMean = mean(c(nMinus2, nMinus1,nPlus1,nPlus2)) ) df ## # A tibble: 20 x 7 ## # Rowwise: ## X Y nMinus2 nMinus1 nPlus1 nPlus2 stepMean ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.0187 -0.596 NA NA 2.19 3.26 NA ## 2 -0.166 -2.78 NA 2.19 1.53 3.42 NA ## 3 -1.54 -3.46 3.26 1.53 2.20 3.40 2.60 ## 4 -2.14 -5.58 3.42 2.20 1.30 1.78 2.17 ## 5 -1.84 -6.84 3.40 1.30 0.540 1.34 1.64 ## 6 -1.45 -7.21 1.78 0.540 1.39 2.21 1.48 ## 7 -2.66 -7.90 1.34 1.39 0.945 2.22 1.47 ## 8 -3.02 -8.77 2.21 0.945 1.63 1.92 1.68 ## 9 -4.65 -8.88 2.22 1.63 0.361 2.27 1.62 ## 10 -4.91 -9.13 1.92 0.361 2.16 2.68 1.78 ## 11 -3.80 -11.0 2.27 2.16 0.760 1.03 1.55 ## 12 -3.05 -11.1 2.68 0.760 0.997 1.38 1.45 ## 13 -3.29 -10.1 1.03 0.997 1.00 2.10 1.28 ## 14 -2.30 -9.91 1.38 1.00 1.57 2.94 1.72 ## 15 -1.56 -11.3 2.10 1.57 1.44 1.38 1.62 ## 16 -1.47 -12.7 2.94 1.44 1.02 1.81 1.80 ## 17 -2.42 -12.4 1.38 1.02 1.77 2.21 1.59 ## 18 -2.62 -14.1 1.81 1.77 0.981 1.71 1.57 ## 19 -1.69 -14.4 2.21 0.981 0.811 NA NA ## 20 -1.21 -15.1 1.71 0.811 NA NA NA We can now determin if an animal is moving or not by specifying a threshold on stepMean df &lt;- df %&gt;% mutate( moving = stepMean&gt;1.5 ) df ## # A tibble: 20 x 8 ## # Rowwise: ## X Y nMinus2 nMinus1 nPlus1 nPlus2 stepMean moving ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;lgl&gt; ## 1 0.0187 -0.596 NA NA 2.19 3.26 NA NA ## 2 -0.166 -2.78 NA 2.19 1.53 3.42 NA NA ## 3 -1.54 -3.46 3.26 1.53 2.20 3.40 2.60 TRUE ## 4 -2.14 -5.58 3.42 2.20 1.30 1.78 2.17 TRUE ## 5 -1.84 -6.84 3.40 1.30 0.540 1.34 1.64 TRUE ## 6 -1.45 -7.21 1.78 0.540 1.39 2.21 1.48 FALSE ## 7 -2.66 -7.90 1.34 1.39 0.945 2.22 1.47 FALSE ## 8 -3.02 -8.77 2.21 0.945 1.63 1.92 1.68 TRUE ## 9 -4.65 -8.88 2.22 1.63 0.361 2.27 1.62 TRUE ## 10 -4.91 -9.13 1.92 0.361 2.16 2.68 1.78 TRUE ## 11 -3.80 -11.0 2.27 2.16 0.760 1.03 1.55 TRUE ## 12 -3.05 -11.1 2.68 0.760 0.997 1.38 1.45 FALSE ## 13 -3.29 -10.1 1.03 0.997 1.00 2.10 1.28 FALSE ## 14 -2.30 -9.91 1.38 1.00 1.57 2.94 1.72 TRUE ## 15 -1.56 -11.3 2.10 1.57 1.44 1.38 1.62 TRUE ## 16 -1.47 -12.7 2.94 1.44 1.02 1.81 1.80 TRUE ## 17 -2.42 -12.4 1.38 1.02 1.77 2.21 1.59 TRUE ## 18 -2.62 -14.1 1.81 1.77 0.981 1.71 1.57 TRUE ## 19 -1.69 -14.4 2.21 0.981 0.811 NA NA NA ## 20 -1.21 -15.1 1.71 0.811 NA NA NA NA ggplot(df, aes(X,Y)) + geom_path() + geom_point(aes(colour = moving)) + coord_equal() Unique IDs per segment When segmenting trajectories, we often want to compute metrics on the basis of each segment. Within the tidyverse logic, we need a unique ID per segment that we can pass to group_by(). In other words, we need a unique ID for a sequence of successive TRUE values. For lack of a better way, we suggest solving this problem with cumsum(). cumsum() returns the cummulative sum of a given vector: one_to_ten &lt;- 1:10 one_to_ten ## [1] 1 2 3 4 5 6 7 8 9 10 cumsum(one_to_ten) ## [1] 1 3 6 10 15 21 28 36 45 55 In R, TRUEand FALSE are interprated as 1 and 0 if coerced to an integer. as.integer(TRUE) ## [1] 1 as.integer(FALSE) ## [1] 0 TRUE+TRUE ## [1] 2 Therefore, cumsum() on a boolean vector increases the count on each TRUE value: boolvec &lt;- c(FALSE,TRUE,TRUE,TRUE,FALSE,FALSE,TRUE,TRUE) df_cumsum &lt;- tibble(boolvec = boolvec,cumsum = cumsum(boolvec)) df_cumsum ## # A tibble: 8 x 2 ## boolvec cumsum ## &lt;lgl&gt; &lt;int&gt; ## 1 FALSE 0 ## 2 TRUE 1 ## 3 TRUE 2 ## 4 TRUE 3 ## 5 FALSE 3 ## 6 FALSE 3 ## 7 TRUE 4 ## 8 TRUE 5 You might have noticed that this is pretty much exactly the opposite of what we need. We therefore have to take the inverse of the boolean vector: df_cumsum %&gt;% mutate( boolvec_inverse = !boolvec, cumsum2 = cumsum(boolvec_inverse) ) ## # A tibble: 8 x 4 ## boolvec cumsum boolvec_inverse cumsum2 ## &lt;lgl&gt; &lt;int&gt; &lt;lgl&gt; &lt;int&gt; ## 1 FALSE 0 TRUE 1 ## 2 TRUE 1 FALSE 1 ## 3 TRUE 2 FALSE 1 ## 4 TRUE 3 FALSE 1 ## 5 FALSE 3 TRUE 2 ## 6 FALSE 3 TRUE 3 ## 7 TRUE 4 FALSE 3 ## 8 TRUE 5 FALSE 3 To simplify our workflow, we can we can take the inverse of boolvec within our cumsum() statement and save an extra line of code. df_cumsum %&gt;% mutate( cumsum2 = cumsum(!boolvec) ) ## # A tibble: 8 x 3 ## boolvec cumsum cumsum2 ## &lt;lgl&gt; &lt;int&gt; &lt;int&gt; ## 1 FALSE 0 1 ## 2 TRUE 1 1 ## 3 TRUE 2 1 ## 4 TRUE 3 1 ## 5 FALSE 3 2 ## 6 FALSE 3 3 ## 7 TRUE 4 3 ## 8 TRUE 5 3 Task 1: Segmentation With the skills from the input above we can now implement the segmentation algorithm described in Laube and Purves (2011). The described method depends on a regular sampling interval. Therefore, take the dataset caro60.csv from task 3 of last week (available on moodle). Import it as a dataframe, we dont need an sf-object to for todays tasks. Next, we have to have to define our temporal window v (Laube and Purves 2011). To keep things simple, I would suggest a window of n +/- 2 minutes. With a sampling interval of around 1 minute, this corresponds to a window size of n +/- 2 positions. Task 2: Specify and apply threshold d After calculating the Euclidean distances to positions within the temporal window v in task 1, you can explore these values (we stored them in the column stepMean) using summary statistics (histograms, boxplot, summary()): This way we can define a reasonable threshold value to differentiate between stops and moves. There is no correct way of doing this, specifying a threshold always depends on data as well as the question that needs to be answered. In this exercise, find a threshold that matches your intuition. Store the new information (boolean to differentiate between stops (TRUE) and moves (FALSE)) in a new column named moving. ## Min. 1st Qu. Median Mean 3rd Qu. Max. NA&#39;s ## 0.8109 2.2397 3.3496 5.0371 5.8618 24.2903 4 Task 3: Visualize segmented trajectories Now visualize the segmented trajectory spatially. Just like last week, you can use ggplot with geom_path(), geom_point() and coord_equal(). Assign colour = moving within aes() to distinguish between segments with movement and without. Tip: if you want to get a ggplot() with Zoom capability, just load the library plotly and wrap the ggplot() function with ggplotly() Task 4: Segment-based analysis In applying Laube and Purves (2011), weve come as far as steps (b)/(c) in Figure 1. In order to complete step (d) (Removal of subtrajectories with less than a threshold temporal length), we have to calculate each segments temporal duration. In order to do this, we need a unique name for each segment that we can use as a grouping variable. This is where the cumsum() approach which we introduced in the input comes useful. Complete the following steps: Filter the data by removing all rows where moving equals to NA (typically these are the the first and last 2 rows). Get a unique ID per segment and using the cumsum() approach we introduced in the input. Store this ID in a new column segment_ID Filter the data to remove all rows where the animal is not moving Group by the column segment_ID to calculate the temporal length of each segment with mutate(). Remove segments with a duration less than 3 minutes inspect your data visually Task 5: Similarity measures Import the dataset pedestrian.csv (available on moodle) as a dataframe (you dont need an sf object). It it a set of six different but similar trajectories from pedestrians walking on a path. Explore this data visually. We will analyse these trajectories with the package SimilarityMeasures, always comparing trajectory 1 pairwise to the other trajectories 2-6. For this task, explore the trajectories first and get an idea on how the pedestrians moved. We step away from using the wild boar data for this task because our animals dont express the type of similarity we want to illustrate here. Also, using the constructed pedestrian data allows us illustrating very typical similarity issues, that are picked-up in different ways by the different similarity measures. In later exercises we will get back to our wild boar! Task 6: Calculate similarity Calculate the similarity between trajectory 1 and trajectories 2-6. Use the different similarity measures in the package SimilarityMeasures. Visualize your results and try to understand the different results with respect to your reading of Alan Both (2018). Can you see connections between the properties of the trajectories and the similarity values computed by the different measures? Note: All functions in the package need matrices as input, with one trajectory per matrix. LCSStakes very long to compute. The accuracy of the algorithm (pointSpacing = ,pointDistance = and errorMarg =) can be varied to provide faster calculations. Please see Vlachos, Gunopoulos, and Kollios (2002) for more information. "],["W04_01_exercise.html", "Exercise 4", " Exercise 4 "],["W04_01_learning_outcomes.html", "Learning Outcomes", " Learning Outcomes You are able to conceptualize a simple movement pattern and implement data structures and corresponding procedures (lets call them algorithms) for detecting it using R. You understand the sensitivity of movement patterns to pattern parameter thresholds. "],["W04_02_prerequisites.html", "Prerequisites", " Prerequisites Readings Skills from R for Data Science (Wickham and Grolemund 2017): RS4.1 Chap15 Functions (19p, 269-289) Readings Theory, Laube (2014) - R4.1 Chap.2, p. 29-58 "],["W04_03_preparation.html", "Preparation", " Preparation ## Preperation ################################################################# Open your R Project from last week. Either run your own script from last week or the following lines to transform the data into the form we need for todays exercise. library(tidyverse) library(sf) library(lubridate) # Import as tibble wildschwein_BE &lt;- read_delim(&quot;00_Rawdata/wildschwein_BE.csv&quot;,&quot;,&quot;) # Convert to sf-object wildschwein_BE &lt;- st_as_sf(wildschwein_BE, coords = c(&quot;Long&quot;, &quot;Lat&quot;), crs = 4326,remove = FALSE) # transform to CH1903 LV95 wildschwein_BE &lt;- st_transform(wildschwein_BE, 2056) # Add geometry as E/N integer Columns wildschwein_BE &lt;- st_coordinates(wildschwein_BE) %&gt;% cbind(wildschwein_BE,.) %&gt;% rename(E = X) %&gt;% rename(N = Y) # Compute timelag, steplength and speed wildschwein_BE &lt;- wildschwein_BE %&gt;% group_by(TierID) %&gt;% mutate( timelag = as.numeric(difftime(lead(DatetimeUTC),DatetimeUTC,units = &quot;secs&quot;)), steplength = sqrt((E-lead(E,1))^2+(N-lead(N,1))^2), speed = steplength/timelag ) "],["W04_04_tasks_and_inputs.html", "Tasks and inputs", " Tasks and inputs Input: Creating functions ## Input: Creating Functions ################################################### Up to now, we have used a variety of different functions designed by other developers. Sometimes we need to execute an operation multiple times, and most often it is reasonable to write a function to do so. Whenever youve copied and pasted a block of code more than twice, you should consider writing a function (Wickham and Grolemund 2017). We have violated this rule multiple times when calculating the Euclidean distances between points. Writing and rewriting the code sqrt((x-lead(x,1))^2+(y-lead(y,1))^2) over and over again is not only cumbersome, it is also error prone. We can easily wrap this operation into a function. This input on writing functions should bring you up to speed to do this in your first task. The first step in writing a function, is picking a name and assigning &lt;- function(){} to it. testfun &lt;- function(){} To run the function, we have to call the assigned name with the brackets. This function gives no output, which is why we get NULL back. testfun() ## NULL class(testfun) ## [1] &quot;function&quot; To make the function actually do something, we need to specify what should be done within the curly brackets {}. The following function always prints the same statement and accepts no input values: testfun &lt;- function(){print(&quot;this function does nothing&quot;)} testfun() ## [1] &quot;this function does nothing&quot; If we want the function to accept some input values, we have to define them within the round brackets. For example, I specify a variable named sometext and can call this variable within the execution. testfun &lt;- function(sometext){print(sometext)} testfun(sometext = &quot;this function does slightly more, but still not much&quot;) ## [1] &quot;this function does slightly more, but still not much&quot; Lets take a more practical example. Say we want a function that calculates the nth root of a value, since the base function sqrt() just returns the 2nd root. To do this, we need to know two things: taking the nth rooth of x is the same as raising x by the the reciprocal value (Kehrwert) of n \\[\\sqrt[n]{x}=\\ x^{\\frac{1}{n}}\\] We can raise a value x to the power of a value n in R with the following code: x^n To create a function that simplifies taking the nth root, we just need one line of code: # specify two parameters: # x: the value with want to take the root from # n: the root we want to take (2 for 2nd root) nthroot &lt;- function(x,n){x^(1/n)} # Test function by taking the second root of 4. # Expecting the result to be 2: nthroot(x = 4,n = 2) ## [1] 2 As we already know from using other functions, if we declare our variables in the order that we initially listed them, we do not need to specify the parameters (no need of x =and n =). nthroot(27,3) ## [1] 3 nthroot(3,3) ## [1] 1.44225 If we want any of our parameters to have default value, we can assign an initial value to the parameter when declaring the variables within the round brackets. nthroot &lt;- function(x,n = 2){x^(1/n)} # if not stated otherwise, our function takes the square root nthroot(10) ## [1] 3.162278 # We can still overwrite n nthroot(10,3) ## [1] 2.154435 All you need to do now is run these few lines of code at the beginning of your script, and you can use the function for your entire R session. After starting a new session, you will simply have to re-run the lines. So it might be a good idea to place this function within the section Loading environment / libraries of your project. Task 1: Write your own functions Create a function for our Euclidean distance calculation. Optionally, write another function to number successive TRUE values with the cumsum() approach from last week. Note: if you treat your input variables as vectors, they will work in most use cases (in particular in dplyrs mutate() and summarise() functions). Task 2: Filter data We propose conceptualizing the pattern meet as being close in space and time, with the notion close to be defined for the spatial and the temporal case separately. We will simplify the problem slightly so that we can use a number of R tools and data structures you now have learned to use by now. As a first simplification we propose manipulating the timestamps in such a way, that all observations are sampled concurrently, synchronously. This allows us using the data science concept join for detecting the temporal expression of meet - using DateTimeUTC as the key variable in a join statement: Observations with an identical time stamp will match. Once we have identified the temporal matches, we check if the concurrent observations are also close in space based on the Euclidean distances between concurrent positions. Simplifying the task even further, we will focus on an interval where we have a continuous, small sampling interval over all our animals. So, filter your dataset to the time period 01.04.2015 - 15.04.2015) and save it to a new variable (e.g. wildschwein_filter). After filtering, visualize your data spatially. Just consider animals with a spatial overlap and remove animals where we cannot expect to find any meet patterns. Task 3: Create Join Key head(wildschwein_filter) ## Simple feature collection with 6 features and 11 fields ## geometry type: POINT ## dimension: XY ## bbox: xmin: 2570245 ymin: 1205259 xmax: 2570375 ymax: 1205320 ## projected CRS: CH1903+ / LV95 ## # A tibble: 6 x 12 ## # Groups: TierID [1] ## TierID TierName CollarID DatetimeUTC Lat Long E N ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dttm&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 002A Sabi 12275 2015-03-31 22:00:28 47.0 7.05 2570296. 1205283. ## 2 002A Sabi 12275 2015-03-31 22:15:44 47.0 7.05 2570259. 1205259. ## 3 002A Sabi 12275 2015-03-31 22:30:44 47.0 7.05 2570255. 1205259. ## 4 002A Sabi 12275 2015-03-31 22:46:04 47.0 7.05 2570245. 1205268. ## 5 002A Sabi 12275 2015-03-31 23:00:17 47.0 7.05 2570364. 1205314. ## 6 002A Sabi 12275 2015-03-31 23:15:12 47.0 7.05 2570375. 1205320. ## # ... with 4 more variables: geometry &lt;POINT [m]&gt;, timelag &lt;dbl&gt;, ## # steplength &lt;dbl&gt;, speed &lt;dbl&gt; Have a look at your dataset. You will notice that samples are taken at every full hour, quarter past, half past and quarter to. The sampling time is usually off by a couple of seconds. Verify if we have the same sampling interval (timelag) throughout our filtered dataset. ## Simple feature collection with 6 features and 11 fields ## geometry type: POINT ## dimension: XY ## bbox: xmin: 2570245 ymin: 1205259 xmax: 2570375 ymax: 1205320 ## projected CRS: CH1903+ / LV95 ## # A tibble: 6 x 12 ## # Groups: TierID [1] ## TierID TierName CollarID DatetimeUTC Lat Long E N ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dttm&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 002A Sabi 12275 2015-03-31 22:00:28 47.0 7.05 2570296. 1205283. ## 2 002A Sabi 12275 2015-03-31 22:15:44 47.0 7.05 2570259. 1205259. ## 3 002A Sabi 12275 2015-03-31 22:30:44 47.0 7.05 2570255. 1205259. ## 4 002A Sabi 12275 2015-03-31 22:46:04 47.0 7.05 2570245. 1205268. ## 5 002A Sabi 12275 2015-03-31 23:00:17 47.0 7.05 2570364. 1205314. ## 6 002A Sabi 12275 2015-03-31 23:15:12 47.0 7.05 2570375. 1205320. ## # ... with 4 more variables: geometry &lt;POINT [m]&gt;, timelag &lt;dbl&gt;, ## # steplength &lt;dbl&gt;, speed &lt;dbl&gt; With a few exceptions, the sampling interval is around 15 minutes. In order to join the data, however, we need identical time stamps to serve as a join key. We therefore need to slightly adjust our time stamps to a common, concurrent interval. Round the minutes of DatetimeUTC to a multiple of 15 (00, 15, 30,45) and store the values in a new column. You can use the lubridate function round_date() for this. See the examples here to see how this goes. Please note: We are manipulating our time stamps without adjusting the x,y-coordinates. This is fine for our simple example, but we would advice against this in a more serious research endeavour, e.g. in your semester projects. One simple approach would be to linearly interpolate the positions to the new timestamps. If you choose Option A the wild boar projects as your semester projects, you should aim for a linear interpolation. Get in touch if you need help with this. Task 4: Measuring distance at concurrent locations To measure the distance between concurrent locations, we need to follow the following steps. First, split the wildschwein_filter object into one data.frame per animal.3 Next, join these datasets by the new, manipulated Datetime column and save it to the variable wildschwein_join. Which join-type is appropriate? The joined observations are temporally close. On wildschwein_join, calculate Euclidean distances between concurrent observations. Store the values in a new column distance. Use a reasonable threshold on distance to determine if the animals are also spatially close enough to constitute a meet (we use 50 meters). Store this Boolean information (TRUE/FALSE) in a new column named meet. ## # A tibble: 1,344 x 9 ## TierID.x DatetimeRound E.x N.x TierID.y E.y N.y distance ## &lt;chr&gt; &lt;dttm&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 002A 2015-03-31 22:00:00 2.57e6 1.21e6 016A 2.57e6 1.20e6 482. ## 2 002A 2015-03-31 22:15:00 2.57e6 1.21e6 016A 2.57e6 1.20e6 536. ## 3 002A 2015-03-31 22:30:00 2.57e6 1.21e6 016A 2.57e6 1.20e6 542. ## 4 002A 2015-03-31 22:45:00 2.57e6 1.21e6 016A 2.57e6 1.20e6 564. ## 5 002A 2015-03-31 23:00:00 2.57e6 1.21e6 016A 2.57e6 1.20e6 486. ## 6 002A 2015-03-31 23:15:00 2.57e6 1.21e6 016A 2.57e6 1.20e6 470. ## 7 002A 2015-03-31 23:30:00 2.57e6 1.21e6 016A 2.57e6 1.20e6 440. ## 8 002A 2015-03-31 23:45:00 2.57e6 1.21e6 016A 2.57e6 1.20e6 432. ## 9 002A 2015-04-01 00:00:00 2.57e6 1.21e6 016A 2.57e6 1.20e6 451. ## 10 002A 2015-04-01 00:15:00 2.57e6 1.21e6 016A 2.57e6 1.20e6 522. ## # ... with 1,334 more rows, and 1 more variable: meet &lt;lgl&gt; Task 5: Visualize data Now, visualize the meets spatially in a way that you think reasonable. You can attempt to recreate the plot below, but this is not trivial. If you want to try it, these are the steps to take: Create a new dataset (e.g. wildschwein_meet) as follows: Using the cumsum()approach from last week, create a new column (e.g. meet_seq) enumerating the meets with individual ID (see proposed function below) Filter all rows where the animals did meet. Optional: create a column with the start- and endtime of each meet (e.g. meet_time) To create a plot similar to the one below: Initiate a ggplot() with the wildschwein_join dataset. Add two geom_point-layers (not geom_sf, since we havent turned wildschwein_join into an sfobject), one referring to E.x/N.x, the other to E.y/N.y Add two more geom_point-layers, this time with the dataset wildschwein_meet Facet the plot into small multiples either using meet_seq or meet_time Task 6 (optional): Visualize data as timecube with plotly ## Task 6 ###################################################################### Finally, you can nicely visualize the meeting patterns and trajectories in a Space-Time-Cube (Hägerstraand 1970) with the package plotly. There are some nice ressources available online. This is a perfect opportunity to learn functional programming if you are an intermediate to advanced programmer (or want to be). You can use purrr::map() specifically for these tasks. Ask us if you want to learn this but are struggling "],["W05_01_exercise.html", "Exercise 5", " Exercise 5 "],["W05_01_learning_outcomes.html", "Learning Outcomes", " Learning Outcomes You are able to process spatial data (vector and raster) within R, including creating simple maps within R. You know basic operations for semantically annotating your trajectories with geographic context. "],["W05_02_preperation.html", "Preperation", " Preperation ## Preperation ################################################################## Open your R Project from last week. Either run your own script from last week or the following lines to transform the data into the form we need for todays exercise. library(tidyverse) library(sf) library(ggspatial) library(raster) # Import as tibble wildschwein_BE &lt;- read_delim(&quot;00_Rawdata/wildschwein_BE.csv&quot;,&quot;,&quot;) # Convert to sf-object wildschwein_BE &lt;- st_as_sf(wildschwein_BE, coords = c(&quot;Long&quot;, &quot;Lat&quot;), crs = 4326,remove = FALSE) # transform to CH1903 LV95 wildschwein_BE &lt;- st_transform(wildschwein_BE, 2056) # Add geometry as E/N integer Columns wildschwein_BE &lt;- st_coordinates(wildschwein_BE) %&gt;% cbind(wildschwein_BE,.) %&gt;% rename(E = X) %&gt;% rename(N = Y) "],["W05_03_tasks_and_inputs.html", "Tasks", " Tasks Tasks 1: Import and visualize spatial data ## Task 1 ###################################################################### Import the vector dataset Feldaufnahmen_Fanel_2016.shp from moodle with read_sf() and save it to the variable fanel2016. The file .shp stands for Shapefile, which is a simple format for spatial vector data (points, lines, or polygons). This shapefile contains vector data about cultivated crops in the study area. Transform the coordinates to CH1903+ LV95. Filter the dataset wildschwein_BE to the months May, June and July of 2016 and store the data in a new variable (wildschwein_BE_2015). Create a minimum convex polygon for each individual in wildschwein_BE_2015 and store it in a new variable (mcp2015) Create a map with the layers fanel2016 and mcp2015. ## [1] &quot;2015-07-27 11:00:14 UTC&quot; Task 2: Annotate Trajectories from vector data ## Task 2 ###################################################################### Now we would like to know what crop was most visited by our wild boar, and at what time. To this end, use st_join() to attach the attributes from fanel2016 to your trajectory data wildschwein_BE (semantic annotation). Visualize the number of sample points in each category of Frucht over the course of the filtered time period. Task 3: Explore annotated trajectories Think of other ways you could visually explore the spatio-temporal patterns of wild boar in relation to the crops. Ideas: For example, in the visualisation above, we did not account for the different availability of the different crops. Potatoes (Kartoffeln) are seemingly not visited at all, while rapeseed (Raps) has high visitation from May to June. Maybe this is due to the fact that there are mostly rapeseed fields and basically no potatoe fields. How could you consider availability in the visulisation? Exlpore the circadian rhythm / daily patterns of crop visitations. Task 4: Annotate Trajectories from raster data ## Task 4 ###################################################################### In terms of raster data, we have prepared the Vegetation Height Model provided by the Swiss National Forrest Inventory (NFI). This dataset contains high resolution information (1x1 Meter) on the vegetation height, which is determined from the difference between the digital surface models DSM and the digital terrain model by swisstopo (swissAlti3D). Buildings are eliminated using a combination of the ground areas of the swisstopo topographic landscape model (TLM) and spectral information from the stereo aerial photos. "],["references.html", "References", " References Alan Both, Matt Duckham, Kevin Buchin. 2018. A Comparative Analysis of Trajectory Similarity Measures: Recommendations for Selection and Use. Bryan, Jenny, and Jim Heister. 2021. Happy Git and GitHub for the useR. https://happygitwithr.com/. Chacon, Scott, and Ben Straub. 2014. Pro Git. 2nd Edition. Apress. https://git-scm.com/book/en/v2. Hägerstraand, Torsten. 1970. What about People in Regional Science? Papers in Regional Science 24 (1): 724. Laube, Patrick. 2014. Computational Movement Analysis. SpringerBriefs in Computer Science. Springer International Publishing. https://books.google.ch/books?id=xMRpBAAAQBAJ. Laube, Patrick, and Ross S. Purves. 2011. How Fast Is a Cow? Cross - Scale Analysis of Movement Data. Transactions in GIS 15 (3): 40118. https://doi.org/10.1111/j.1467-9671.2011.01256.x. Vlachos, Michail, Dimitrios Gunopoulos, and George Kollios. 2002. Discovering Similar Multidimensional Trajectories. In Proceedings of the 18th International Conference on Data Engineering, 67373. ICDE 02. Washington, DC, USA: IEEE Computer Society. http://dl.acm.org/citation.cfm?id=876875.878994. Wickham, Hadley, and Garrett Grolemund. 2017. R for Data Science: Import, Tidy, Transform, Visualize, and Model Data. 1st ed. OReilly Media, Inc. "]]
